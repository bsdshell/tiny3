": vim: filetype=help foldmethod=marker foldmarker=<<<,>>> modifiable noreadonly
You need the noreadonly and modifiable keywords in the vim modeline above.
Help files are by default regarded as readonly and nomodifiable files by vim.

    [what I'm working on]
    `[
        [Tue Feb  7 15:33:36 PST 2017]
        Reading multiple thread in linkedlist, queue and hashmap. 
        /Users/cat/GoogleDrive/Books/thread_concurrent_linkedlist.pdf

        [Tue Feb  7 15:33:36 PST 2017]
        Finished Animal Logic task with Markov Chain algorithm to generate text
        Use JavaFX API for UI, interesting project.
        prefix: two words, suffix: one word, can be extended to arbitrary long prefix 

        [Tue Feb  7 15:33:36 PST 2017]
        Krita tab to enable and disable scroll bar.

        [Tue Jan 31 19:45:53 PST 2017]
        haskell file gethtml_2.hs, 
        generate html static file
    `] 

    [Haskell import and module]
    `[
        import Data.List
        import qualified Data.List as LL   // LL.

        // check all the functions from module
        [:browse Data.List]

        // use hoogle and doc in Prelude
        check function in which library, e.g.
        :hoogle subsequences
        
        :doc subsequences  (show examples, nice!)

        // list all Packages in Haskell
        ghc-pkg list
        
        // load framework, load package 
        ghci -package GLUT
        ghci -framework GLUT -package GLUT

    `] 

    [ latex to png *latex_to_png* *latex2png* ]
    `[
        convert -density 600x600 tryg1.pdf -quality 90 -resize 1080x800 tryg1.png

        // use it in documentclass  
        \documentclass[border=4pt,convert={density=600,size=300x300,outext=.png}]{standalone}
        pdflatex -shell-escape file.tex
    `] 

    [ *java_regex_example*  *j_regex* ]
    `[
        *j_regex_example*
        Pattern r = Pattern.compile("captheorem", Pattern.CASE_INSENSITIVE);
        Matcher mat = r.matcher("CAPTHEOREM");
        if(mat.find()) {
            Print.p("found=" + mat.group(0));
        }
    `]

    [MySql show database, use table, *n_database* *n_db* ]
    `[
        mysql> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | testdb             |
        +--------------------+

        mysql> use testdb;
        mysql> show tables;
        +------------------+
        | Tables_in_testdb |
        +------------------+
        | item             |
        +------------------+
        mysql> desc item;
        +-----------------+--------------+------+-----+---------+----------------+
        | Field           | Type         | Null | Key | Default | Extra          |
        +-----------------+--------------+------+-----+---------+----------------+
        | item_id         | int(11)      | NO   | PRI | NULL    | auto_increment |
        | name            | varchar(40)  | NO   |     | NULL    |                |
        | phone           | varchar(40)  | NO   |     | NULL    |                |
        | email           | varchar(100) | NO   |     | NULL    |                |
        | description     | varchar(400) | NO   |     | NULL    |                |
        | submission_date | date         | YES  |     | NULL    |                |
        +-----------------+--------------+------+-----+---------+----------------+
    `]

    [Skim]
    `[
        // Skim automatically reload 
        defaults write -app Skim SKAutoReloadFileUpdate -boolean true
    `] 

    [lldb debug, xcode debug]
    `[
        command source ~/.lldbinit                                       // debug, lldb, load init file from xcode console
        command source /home/mycommand.txt                               // debug, lldb, load your commands file

        command script import /Users/cat/myfile/github/lldb/mycommand.py // debug, lldb, load python script
        {command script import} file

        command alias pi print(int)                                      // debug, lldb, alias your command
        command alias allv script print lldb.frame.get_all_variables()   // debug, lldb, alias you script
        br list                                                          // debug, lldb, list all breakpoints
        f                                                                // debug, lldb, select the current frame
        up                                                               // debug, lldb, go up one frame
        e NSString* $str = @"dog"                                        // debug, lldb, global var with $
        c                                                                // debug, lldb, continua
        n next                                                           // debug, lldb, step over
        step                                                             // debug, lldb, step into
        finish                                                           // debug, lldb, step out

        breakpoint modify -c 'i > 50' l                                  // debug, lldb, conditional break add command
        breakpoint command add 1                                         // debug, lldb, conditional break add command
        bt
        DONE

        breakpoint set --func-regex fibona.*                             // debug, lldb, set breakpoint regex function name [h br set]
        breakpoint set --name   "-[NSString stringWithFormat:]"          // debug, lldb, set br ObjectiveC method name [h br set]
        breakpoint set --method main
        breakpoint set -c 'i == 10'                                      // debug, lldb, conditional breakpoint  [h br set]
        breakpoint set -i 10                                             // debug, lldb, ignore count, stop until the count [h br set]

        watchpoint set variable global_var                               // debug, lldb, set watchpoint when global_var is written to
        w s v  global_var                                                // debug, lldb, set watchpoint when global_var is written to
        watchpoint set expression -- my_ptr                              // debug, lldb, set watchpoint when my_ptr is written to
        w s e -- my_ptr                                                  // debug, lldb, set watchpoint when my_ptr is written to

    `] 

    [Emacs key Emac key]
    `[
        C-z     // exit Emacs        
        C-u M-! shell_command
        C-v M-v // page up, page down
        C-a C-e // move cursor to begin and end of line
        C-n C-p // move line down, line up
        C-f M-f // move cursor character/word forward
        C-b M-b // move cursor character/word backward
        C-k M-k // kill all word to end of line or end of sentence
        C-_     // undo
        C-x C-f // find file
        C-x C-s // save file 
        C-x b   // switch buffer
        C-x C-b // list buffer
        C-x 1   // remove buffer list
        C-x 2   // split two windows (horizonal)
        C-x o   // move to other window
        C-h     // help command
        M-x package-list-packages  i // select package to install
    `] 

    [build cpp]
    `[
        all: 
            clang++ -g -v -std=c++11 -stdlib=libc++ -o  MergeSortedList MergeSortedList.cpp Aron.cpp
            clang++ -g -v -std=c++11 -stdlib=libc++ -o  DataStructure  DataStructure.cpp 
            clang++ -g -v -std=c++11 -stdlib=libc++ -o   DecimalBinary DecimalBinary.cpp  Aron.cpp
    `] 
    [build GLFW and OpenGL on MacOSX]
    `[
        Install GLFW with brew
        brew install --static glfw3
        /usr/local/include
        /usr/local/lib

        g++ hello_flew.cpp -I/usr/local/include -L/usr/local/lib -lglfw3 -framework Cocoa -framework OpenGL -framework IOKit 
        -framework CoreFoundation -framework CoreVideo
    `] 

    [Shell crazy symbol ]
    `[
        for arg in $* 
        do
        echo "[\$*]=".$arg
        done 
        #[$*]=.n1
        #[$*]=.n2
        #[$*]=.n3

        for arg in "$*" 
        do
            echo "[\$*]=".$arg
        done
        #[$*]=.n1 n2 n3

        for arg in $@ 
        do
            echo "[\$@]=".$arg
        done
        #[$@]=.n1
        #[$@]=.n2
        #[$@]=.n3

        for arg in "$@"
        do
            echo "[\$@]=".$arg
        done
        #[$@]=.n1 n2
        #[$@]=.n3


        // profile bashrc share environment variables user and root, share variable
        /etc/profile
    `] 

    [IFS internal field separator ]
    `[
        # IFS = interal field separator
        # IFS default = space and tab
        mystr="triangle angel strange"
        for word in $mystr; do
            echo "word=[$word]"
        done
        echo "-------------------------"

        IFS=' '
        for word in $mystr; do
            echo "word=[$word]"
        done
    `] 

    [xcode debug, symbolic breakpoint]
    {{ src=image/symbolic_break_point.png w=80% h=80% }}

    [xcode shortcut key xcode key xcode, shortcut, xcode sc, xcode search]
    `[
        Shift ALT Command Left/Right  fold all code/unfolded all code
        CTRL 5 search files name(.h *.m)                                // xcode search
        CTRL 6 type search show all current methods
        CTRL WindowKey left/right  navigate backward/backward
        CTRL 1 show recent items
        CTRL C delete current line
        ALT Left/Right  move word by word
        Command ALT .(dot) change focus
        Command ALT Left/Right code fold/unfolded
        Command ALT 0 close utilities window

        Command left/right move cursor to begin/end of line(no highligh)
        Command , show setting(xcode)
        Command 3 global search
        Command w close window (not just xcode)
        Command [] shift hightlight code left/right
        Command double click jump to definition
        Command D mark line
        Command L goto line
        Command E, Command F use selection to find
        Command E + Command F search word under cursor
        Command Shift O Quick Search file
        Command Shift Y close debug window
        Command Shift 2 Open Organizer
        Command Shift f  global find
        Command Shift Left/Right  selection whole line
        Command Shift right/left highlight line
        Command CTRL UP/Down .h and .m file
        Command CTRL J jump to definition
        Command CTRL Left jump back
        Command CTRL F full/maximize screen mode
        Command CTRL Y debug/continue 
        Command `  window fit screen
    `] 

    [Intellij shortcut key]
    `[
        // intellij shortcut key
        Ctrl Shift /    // comment block code
        Shift Tab       // move block of code(code selection) to left
        Tab/Shift+Tab   // indent/unintented selected line
        Alt Right/Left  // cycle through tabs
        Alt Shift F7    // goto usage
        Alt Shit f      // global search
        Alt g           // find name
        Alt UP/Down     // move to previous/next method
        Ctrl F12        // show all current methods
        Ctrl W          // select code block. e.g {..}
        Ctrl-Shift F12  // max/unmaxed window
        Ctrl UP/Down    // move window up/down
        Ctrl [/]        // Move to code block star/end
        Ctrl Shift #    // book mark line, bookmark line
        Ctrl #          // goto bookmark #, goto book mark #
        Ctrl Alt B      // goto implementation
        Ctrl E          // go back to implementation
        Ctrl Alt F7     // shows usages
        Ctrl w          // select whole word
        Ctrl Left/Right // move cursor previous/next
        Ctrl Shift R    // find and replace
        Ctrl Shift j    // join line
    `] 

    [ *maven* *mvn* ]
    `[
        mvn archetype:generate -DgroupId=MyApp -DartifactId=MyCompany -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
        cd MyCompany
        mvn install
        java -cp target/MyCompany-1.0-SNAPSHOT.jar MyApp.App
    `]  

    [iPhone iPad info ]
    `[
         --------------------------------------------------------------------
         iPhone 4s
         width=[320.000000]
         height=[480.000000]
         scale =[2.000000]
         nativeWidth=[640.000000]
         nativeHeight=[960.000000]
         scale =[2.000000]
         --------------------------------------------------------------------
         iPhone 5 and up
         width=[320.000000]
         height=[568.000000]
         scale =[2.000000]
         nativeWidth=[640.000000]
         nativeHeight=[1136.000000]
         scale =[2.000000]
         --------------------------------------------------------------------
         iPad 2
         Switch Back
         width=[768.000000]
         height=[1024.000000]
         scale =[1.000000]
         nativeWidth=[768.000000]
         nativeHeight=[1024.000000]
         scale =[1.000000]
         iPad
         --------------------------------
         iPad Air
         width=[768.000000]
         height=[1024.000000]
         scale =[2.000000]
         nativeWidth=[1536.000000]
         nativeHeight=[2048.000000]
         scale =[2.000000]
         --------------------------------
         ipad Air 2
         Switch Back
         width=[768.000000]
         height=[1024.000000]
         scale =[2.000000]
         nativeWidth=[1536.000000]
         nativeHeight=[2048.000000]
         scale =[2.000000]
         --------------------------------
         iPad Pro
         width=[768.000000]
         height=[1024.000000]
         scale =[2.000000]
         nativeWidth=[1536.000000]
         nativeHeight=[2048.000000]
         scale =[2.000000]
         iPad Retina
         --------------------------------
         width=[768.000000]
         height=[1024.000000]
         scale =[2.000000]
         nativeWidth=[1536.000000]
         nativeHeight=[2048.000000]
         scale =[2.000000]
         --------------------------------
    `] 
    [Regular Expression ]
    `[
        :negative operator *not_operator* *negative_operator* *not_follow*
        :/if \(\(then\)\@!.\)*  // if not followed then
        :%s/`[\zs\(`\]\)
        :%s/{\(}\@!\_.\)*//gc   // substitue all content inside the { and } 
        :%s/\dc\@!/\=submatch(0)-1/gc // substitue all digit with not following 'c'
    `] 

    [GPG encrypt directory, tar file, encrypt file]
    `[
        *GPG* *gpg* *gpg_key* *gen_key*
       gpg -d -o password.txt password.txt.gpg // decrypt gpg file to password.txt
        gpg -c dir.tar.gz
        gpg -c -o dir.tar.gz dir.tar.gz.gpg     // encrypt your tar file

        gpg --gen-key                           // generate new key
        gpg --list-keys                         // list key
        gpg --delete-keys C3B95227              // delete key uid=C3B95227
        tar -czf dir.tar.gz dir                 // tar file
        tar -xzf dir.tar.gz dir                 // untar file
    `]
     
    [Haskell map HashMap]
    `[
        *h_hash* *h_hashmap* *h_map*
        import qualified Data.Map as Map
        phoneBook = Map.fromList [(1234, "Erik"), (5678, "Patrik")]
        main = do
            print phoneBook
            print $ Map.lookup 1234 phoneBook
            print $ (Map.empty :: Map.Map Int Int)
            print $ Map.singleton 3 5
            print $ Map.insert 1 "abc" Map.empty
            print $ Map.null phoneBook
            print $ Map.size phoneBook
            print $ Map.toList phoneBook
            print $ Map.keys phoneBook
            print $ Map.elems phoneBook
    `] 

    [Haskell convert String to Float, Int, Integer ]
    `[
        read "3.14"::Float
        read "123"::Int
        read "123"::Integer
        reads "123aa"::[(Int, String)] => [(123, "aa")]
        reads "aa123"::[(Int, String)] => []
        [ http://stackoverflow.com/questions/2468410/convert-string-to-integer-float-in-haskell ]
    `] 

    [Haskell foldr and foldl]
    {{ src=image/fold_left_right.png w=80% h=80% }}

    [Haskell List]
    `[
        take 1 [1, 2, 3]             -- [1]
        drop 1 [1, 2, 3]             -- [2, 3]

        init [1, 2, 3]               -- [1, 2]
        last [1, 2, 3]               -- 3

        head [1, 2, 3]               -- 1
        tail [1, 2, 3]               -- [2, 3]

        foldr (++) "" ["cat", "dog"] -- "catdog"

        concat([[1], [2]]) = [1, 2]

        foldr(++) [] [["dog"], ["cat"]]

        subsequences [1, 2]          -- [[], [1], [2], [1, 2]]

        takeWhile::(a->Bool)->[a]->[a]
        takeWhile(<3) [1..10] -- [1, 2]

        [ https://hackage.haskell.org/package/filepath-1.4.1.0/docs/System-FilePath-Posix.html ]
        import System.FilePath
        takeFileName  -- "file.ext"
        takeDirectory -- "/directory"
        takeExtension -- ".ext"
        dropExtension -- "/directory/file"
        takeBaseName  -- "file"
    `] 
    {{ src=image/headtail.png w=50% h=50% }}

    [Haskell strip whitespace, trim whitespace]
    `[
        import qualified Data.Text as Text
        let s = " ab " 
        Text.strip $ Test.pack s
    `] 
    [Haskell zip]
    `[
        zip [1..3] [1..3]  = [(1,1)(2,2)(3,3)] 
    `]
    [Haskell zipWith]
    `[
        zipWith(\x y ->[x, y])[1, 2][2, 3] = [[1,2] [2,3]]
    `]

    [Haskell zipWith]
    `[
        zipWith(\x y->x+y) [1, 2] [3, 4]
        -- output [4, 6]
    `]
    {{ src=image/zip.png w=50% h=50% }}

    [Haskell zipWith]
    :zipWith::(a->b->c)->[a]->[b]->[c]
    `[
        let list1 = [1..4] 
        let list2 = [10..20] 
        zipWith (\x y -> x+y) list1 list2 
    `]
    {{ src=image/zipwith.png w=50% h=50% }}

    [Haskell subRegex]
    :subRegex::Regex->input->replacement->output
    `[
        subRegex(mkRegex "/dog/") "the dog" "cat\0"
        -- output "that catdog"
    `]

    [Haskell uncurry and mapM_]
    :zipWith::(a->b->c)->[a]->[b]->[c]
    `[
        let list1 = ["/file1.txt", "/fil2.txt"]
        let list2 = ["/tmp/name1.txt", "/tmp/name2.txt"]
        mapM_ (uncurry copyFile) $ zip list1 list2 
    `]
    
    [Haskell curry]
    :curry::(a,b)->c->a->b->c
    convert uncurried function to curried function 
    `[
        let c = \(x, y)-> x + y
        curry c 1 2   -- output 3 
    `]

    [Haskell uncurry]
    :uncurry::a->b->c->(a,b)->c
    convert curried function to uncurried function
    `[
        mapM_(uncurry copyFile) $ zip list1 list2 
        let un = \x y -> x*y
        uncurry un (2, 3)   -- output 6
    `]

    [Difference mapM and mapM_ in Haskell]
    `[
        let list = ["Banana", "Apple"]
        mapM putStrLn list
        -- Banana 
        -- Apple
        -- [(), ()]

        mapM_ putStrLn list
        -- Banana 
        -- Apple
    `]

    [Haskell regex capture email address] 
    `[
        let listMail = map(\x -> x =~ "([[:alnum:]\\._]+@[[:alnum:]]+\\.[[:alnum:]]+)"::String) contents 
    `]

    [Haskell regex capture email address] 
    `[
        -- convert list to set and set to list
        let set = Set.fromList mylist 
        print set
        let mylist = Set.toList set
    `]
     
    [Haskell read file and write to file]
    `[
        readFileToList::FilePath->IO [String] 
        readFileToList f = readFile f >>= \contents -> return (lines contents) 

        writeToFile::FilePath->[String]->IO()
        writeToFile f list = writeFile f $ unlines list 
    `]

    [Haskell merge two lists]
    `[
        mergeList::[String]->[String]->[String]
        mergeList [] [] = []
        mergeList  l [] = l 
        mergeList []  r = r 
        mergeList (x:xs) (y:ys) = x:y:mergeList xs ys
    `]

    [Haskell merge two sorted lists]
    `[
        mergeSortList::[Int]->[Int]->[Int]
        mergeSortList [] r          = r
        mergeSortList l []          = l
        mergeSortList (x:xs) (y:ys) = if x < y then x:(mergeSortList xs (y:ys)) else y:(mergeSortList (x:xs) ys)
    `]

    [Haskell merge two lists with Maybe]
    `[
        mergeList2::[a]->[a]->Maybe [a]
        mergeList2 [] [] = Just [] 
        mergeList2 (x:xs) (y:ys) = 
                    case mergeList2 xs ys of
                    Just merged -> Just (x:y:merged)
                    Nothing  -> Nothing
        mergeList2 _ _  = Nothing
    `]

    [Haskell Quick Sort]
    `[
        quickSort::[Int]->[Int]
        quickSort [] = []
        quickSort [x] = [x]
        quickSort l = quickSort(left) ++ p:[] ++ quickSort right 
                            where
                                left =  [x | x <- init l, x < p]
                                right = [x | x <- init l, x >= p]
                                p = last l 
        -- shorter version
        qsort::[Int]->[Int]
        qsort [] = []
        qsort (x:xs) = qsort(left) ++ [x] ++ qsort(right)
                            where (left, right) = (filter(<=x) xs, filter(>x) xs) 

        -- even a shorter version
        qsort::[Int]->[Int]
        qsort [] = []
        qsort (x:xs) = qsort[l| l <- xs, l < x] ++[x]++ qsort[r| r <- xs, r >= x]
    `]

    [kth smallest element from an array]
    `[
        -- kth smallest element from an array
        qsort'::[Int]->Int->Maybe Int
        qsort' [x]  1   = Just x 
        qsort'  x   k   | k <= 0 || k > length x = Nothing 
        qsort' (x:xs) k | k < ln =  qsort' left k 
                        | k > ln =  qsort' right (k - ln) 
                        | otherwise = Just x
                       where 
                           left  = [l | l <- xs, l < x]
                           right = [r | r <- xs, r > x]
                           ln    = (length left) + 1

    `] 

    [Haskell Merge Sort]
    `[
        mergeSort::[Int]->[Int]
        mergeSort [] = []
        mergeSort [x] = [x]
        mergeSort l = merge(mergeSort left) (mergeSort right) 
                        where
                            half = (length l) `div` 2
                            left = take half l
                            right = drop half l  

                            merge::[Int]->[Int]->[Int]
                            merge [] r = r
                            merge l [] = l
                            merge (x:xs) (y:ys)  = if x < y
                                                    then 
                                                       x:merge xs (y:ys) 
                                                    else
                                                       y:merge (x:xs) ys 
    `]


    [Haskell split]
    `[
        split::[Int]->([Int], [Int])
        split [] = ([], []) 
        split [x] = ([x], [])
        split (x:y:rest) = (x:xs, y:xy)   
                        where
                            (xs, xy) = split rest
        -- split [1,2,3]  = ([1,3], [2])
        -- split [1,2,3,4]  = ([1,3], [2,4])
    `]
    [Haskell check array]
    `[
        check sum(x_0, x_1,...,x_k) == sum(x_k+1,...,x_n)

        checkSum::[Int]->Int->Bool
        checkSum []  _ = True
        checkSum [x] _ = x    =  = 0
        checkSum l inx | sum(take inx l) == sum(drop inx l) = True
                       | inx <= length l = checkSum l (inx+1)
                       | otherwise       = False

    `]

    [Haskell check array 2]
    `[
        -- check sum(x_0, x_1,...,x_k) == sum(x_k+1,...,x_n)

        -- import Data.List(inits, tails)
        checkSum2::[Int]->Bool
        checkSum2 xs | len > 0 = True 
                    | otherwise = False
                    where
                        len = length $ filter(\x-> sum (fst x) == sum (snd x)) $ splits xs
                        splits::[a] -> [([a], [a])]
                        splits xs = zip (inits xs) (tails xs) 

    `]

    [Haskell check array 3]
    `[
        -- check sum(x_0, x_1,...,x_k) == sum(x_k+1,...,x_n)
        checkSum4::[Int] -> Bool
        checkSum4 a = go a 0 (sum a)
           where go [] left right = left==right
                 go (x:xs) left right | left==right = True
                                      | otherwise = go xs (left+x) (right-x)
    `]

    [Haskell Matrix Multiplication]
    `[
        m1 = [[1, 2], 
              [3, 4]
             ]
        m2 = [[5, 7], 
              [8, 9]
             ]

        mmult::[[Int]] -> [[Int]] -> [[Int]] 
        mmult a b = [ [ sum $ zipWith (*) ar bc | bc <- (transpose b) ] | ar <- a ]
    `]
    
    {{ src=image/manhattan.png w=50% h=50% }}

    [Spiral Array]
    `[
        public static void spiralArray(int[][] array, int k){
        if(array != null){
            int hlen= array.length;
            int wlen= array[0].length;
            
            // both size are even
            if(k < hlen/2 && k < wlen/2){

                // one or two side are odd
                if(hlen - 2*k == 1){
                    for(int i=k; i<wlen-k; i++){
                        System.out.println(array[k][i]);
                    }
                }else if(wlen - 2*k ==1){
                    for(int i=k; i<hlen-k; i++){
                        System.out.println(array[i][k]);
                    }
                }else{
                    for(int w=k; w<wlen-1-k; w++){
                        System.out.println(array[k][w]);
                    }
                    for(int h=k; h<hlen-1-k; h++){
                        System.out.println(array[h][wlen-1-k]);
                    }
                    for(int w=k; w<wlen-1-k; w++){
                        System.out.println(array[hlen-1-k][wlen-1-w]);
                    }
                    for(int h=k; h<hlen-1-k; h++){
                        System.out.println(array[hlen-1-h][k]);
                    }
                    spiralArray(array, k+1);
                }
            }
        }
      }
    `]
    {{ src=image/spiral.png w=50% h=50% }}
    {{ src=image/spiral2.png w=50% h=50% }}
    {{ src=image/onion.png w=50% h=50% }}

    [Is Binary Search Tree Algorithm]
    {{ src=image/isBST.png w=50% h=50% }}
    `[
        public static boolean isBST(Node r)
        {
            if(r != null)
            {
                if(!isBST(r.left))
                    return false;
                if(prev != null && prev.data >= r.data)
                    return false;
                prev = r;
                if(!isBST(r.right))
                    return false;
            }
            return true;
        }
    `]

    [Java compile jar file class file]
    `[
        java -cp /usr/local/lib/antlr-4.0-complete.jar:. Test
        javac -sourcepath /mylib/  -d . HellowWorld.java           // Specify where to find source file and where to put class file
        -d directory sets the destination where to put the class files. 
           The directory must always exist, javac doesn't create the directory.
           If -d is not specified, javac puts the class file in the same directory as the source file. 

        jar cvf Aron.jar classfile/*.class                         // compile class files to jar file, create jar file
        jar tf Aron.jar 
        jar xf jar-file                                            // extract jar to java files 
    `]

    [Java Algorithm]
    Given a binary tree, find all the nodes that k distance from the root
    `[
        public static void kdistance(Node r, int k){
            if(r != null){
                if(k == 0)
                    System.out.println(r.data);
                else{
                    kdistance(r.left, k-1);
                    kdistance(r.right, k-1);
                }
            }
        }
    `]
    {{ src=image/kdistance.png w=50% h=50% }}

    [Increasing Continuous Array]
    {{ src=image/continuousarray.png w=50% h=50% }}
    {{ src=image/conlist.png w=50% h=50% }}

    [Maximum Continuous Sum]
    {{ src=image/maxcontinuoussum.png w=50% h=50% }}

    [Continuous Blocks]
    {{ src=image/continuousblock.png w=50% h=50% }}

    [Java Quick Sort]
    `[
        public static void quickSort(int[] arr, int lo, int hi){
            if(lo < hi){
                int p = partition(arr, lo, hi);
                quickSort(arr, lo, p-1);
                quickSort(arr, p + 1, hi);
            }
        }
        public static int partition(int[] arr, int lo, int hi){
            int len = hi - lo + 1;
            int big = lo;
            if(lo < hi){
                int pivot = arr[hi];
                for(int i=lo; i<len; i++){
                    if(arr[i] < pivot){  
                        swap(arr, big, i);
                        if(big < hi)
                            big++;
                    } 
                }
            }
            return big;
        }
        public static void swap(int[] arr, int i, int j){
            int tmp  = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
        }
    `]
    {{ src=image/partition1.png w=50% h=50% }}

    [Java Kth Median Algorithm]
    `[
        // Find the kth median element in a unsorted array
        // Return index for the kth smaller element
        // Otherwise return -1 if k is invalid  
        public static int modifiedQuickSort(int[] array, int lo, int hi, int k)
        {
            if(k <= hi - lo + 1) 
            {
                if(hi == lo && k == 1)
                    return lo;
                else{
                    int pindex = partition(array, lo, hi);
                    int leftLen = pindex - lo;
                    int rightLen = hi - pindex;
                    if(pindex + 1 > k) 
                        return modifiedQuickSort(array, lo, pindex-1, k);
                    else if(pindex + 1 < k)
                        return modifiedQuickSort(array, pindex+1, hi, k - (leftLen+1));
                    else 
                        return pindex;
                }
            }
            return -1;
        }

        // use modified quicksort algorithm to find the kth median element
        // partition an array to two parts: left_array < pivot < right_array
        public static int partition(int[] array, int lo, int hi)
        {
            int top = lo;
            if(array != null)
            {
                int pivot = array[hi];
                for(int i=lo; i<=hi; i++)
                {
                    if(array[i] < pivot)
                    {
                        swap(array, i, top);
                        if(i < hi)
                            top++;
                    }
                }
            }
            return top;
        } 
    `]
    {{ src=image/newkthmedian.png w=50% h=50% }}

    [Java Data Structrue, javalist, jlist, java list *java_data_structure* ]
    `[
        int[] array     = {1, 2, 3};
        int[][]  array2 = {{1, 2, 3},
                           {4, 5, 6}};
        *ArrayList*
        List<String> alist = new ArrayList<String>(); 
        alist.add("dog");
        alist.add("cat");

        *ArrayList_2D*
        List<ArrayList<String>> list2d = new ArrayList<ArrayList<String>>();
        list2d.add(alist);

        // List
        List<String> list = new ArrayList<String>();
        list.add("eloberate");
        list.add("continue");
        list.add("continuous");

        List<Integer> list = new ArrayList<Integer>(); 

        // Vector
        Vector<String> vector = new Vector<String>();
        vector.add("jobs");
        vector.add("career");
        vector.add("motivation");
        vector.add("ambition");

        // LinkedList
        LinkedList<Integer> linkedList = new LinkedList<Integer>();
        linkedList.add(1);
        linkedList.add(2);

        // Queue
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.add(1);
        queue.add(2);
        queue.remove();
        if(queue.peek() == 2)
            System.out.println("top element is :" + 2);  

        // LinkedBlockingDeque
        // blocking, use lock in the implementation
        Deque<String> blockingDeque = new LinkedBlockingDeque<String>();
        blockingDeque.addFirst("first");
        blockingDeque.addLast("last");

        // ConcurrentLinkedDeque
        // non-blocking
        Deque<String> concurrentDeque = new ConcurrentLinkedDeque<String>();
        concurrentDeque.addFirst("first");
        concurrentDeque.addLast("last");

        // HashMap, java map, jmap, jhash
        Map<String, Integer> map = new HashMap<String, Integer>();
        map.put("cat", 1);
        map.put("dog", 2);

        String key = "cat";
        Integer value = map.get(key);
        if(value != null){
            value = map.get(key);
            System.out.println("key=" + key + " value=" + value); 
        }

        if(map.containsKey(key))
            System.out.println("map contains key=" + key); 

        // List as Value in HashMap
        Map<String, List<String>> mapList = new HashMap<String, List<String>>();
        mapList.put("1", Arrays.asList("dog", "cat", "cow"));
        mapList.put("2", Arrays.asList("C++", "Java", "Haskell"));
        mapList.put("3", Arrays.asList("Scala", "Python", "Ruby"));

        for(Map.Entry<String, List<String>> entry: mapList.entrySet()){
            String myKey = entry.getKey();
            List<String> myList = entry.getValue();
            for(String elem: myList){
                System.out.println("myKey=" + myKey + " list=" + elem); 
            }
        }

        if(mapList.containsKey("key")){
            System.out.println("contains key");
        }

        List<String> list = mapList.get("key");
        int size = mapList.size();
        if(mapList.containsValue("1")){
            System.out.println("contains value");
        }

        List<String> mylist =  mapList.values();
        for(String str:mylist){
            System.out.println("str=" + str);
        }


        // HashSet java hashset java, java set, javaset
        Set<Integer> set = new HashSet<Integer>(Arrays.asList(1, 2));
        Integer item = 1;
        if(set.contains(item))
            System.out.println("set contains element:" + 1);


        for(Integer n : set){
            System.out.println("n=:" + n);
        }

        set.remove(item);
        int size = set.size();
        System.out.println("size =" + set.size()); 

        // iterate set
        for(Integer elem: set){
            System.out.println("for elem:=" + elem); 
        }

        // set to array
        Integer[] array = (Integer[]) set.toArray(new Integer[set.size()]);
        for(Integer n: array){
            System.out.println("n=:" + n);
        }

        Iterator<Integer> iterator = set.iterator();
        while(iterator.hasNext()){
            System.out.println("Iterator elem:=" + iterator.next()); 
        }

        List<String> list = new ArrayList<String>();
        List<String> list = new LinkedList<String>();
        List<String> list = new Stack<String>();
        List<String> list = new Vector<String>();
        Queue<String> queue = new ArrayList<String>();
        Queue<String> queue = new PriorityQueue<String>();
        Queue<Integer> queue = new ArrayList<Integer>();
        Queue<Integer> queue = new PriorityQueue<Integer>();

        // java tokenize
        // import java.util.StringTokenizer;
        String delims = ":";
        String input = "Continuity:Continua:Continuous:Continuation:";
        StringTokenizer st = new StringTokenizer(input, delims);
        while(st.hasMoreElements()){
            System.out.println(st.nextElement());
        }

        // java split
        String delims = ":";
        String input = "what:cool:PaloAlto:Continuity:Continua:Continuous:Continuation:";
        String[] array = input.split(delims);
        for(String str : array){
            System.out.println(str);
        }

    `]

    [Java write file, java write file, j write file, jwf *j_write_file* ]
    `[
        import java.io.*;
        import java.lang.String;
        import java.util.*;
        class writeFile 
        {
            public static void main(String args[]) {
                writeToFile();
            }
            public static void writeToFile(){
                try {
                    // searchkey: write to file, write file, write to text file, open file to write
                    FileWriter fstream = new FileWriter("out.txt");
                    BufferedWriter out = new BufferedWriter(fstream);
                    out.write("hello java");
                    out.close();
                }
                catch(Exception e) {
                }
            }
        }

        import java.io.*;
        String file1 = "file1.txt";
        try(BufferedWriter bw = new BufferedWriter(new FileWriter(file1))){
            bw.write("dog\n");
            bw.write("God");
        }catch(IOException e){
        }
    `] 

    [Read file, java read file, java open file, j open file, jof *j_readfile* *j_read_file* ]
    `[
        import java.io.*;
        class FileRead {
            public static void main(String args[]) {
                try {
                    FileInputStream fstream = new FileInputStream("textfile.txt");
                    // Get the object of DataInputStream
                    DataInputStream in = new DataInputStream(fstream);
                    BufferedReader br = new BufferedReader(new InputStreamReader(in));
                    String strLine;
                    //Read File Line By Line
                    while ((strLine = br.readLine()) != null){
                        // Print the content on the console
                        System.out.println (strLine);
                    }
                        //Close the input stream
                        in.close();
                    }catch (Exception e) {  
                        //Catch exception if any
                        System.err.println("Error: " + e.getMessage());
                    }
            }
        }

        import java.io.*;
        String file = "file.txt";
        try(BufferedReader br = new BufferedReader(new FileReader(file))){
            for(String line; (line = br.readLine()) != null;){
                System.out.println("[" + line + "]");
            }
        }catch(IOException io){
        }
    `] 

    [Java Comparable, jcompare, jcomparable, java compare, java comparatable *j_compare* ]
    `[
        class Contact implements Comparable<Contact> {
            String name;
            String addr;
            int    age;
            public Contact(String name, String addr, int age) {
                this.name = name;
                this.addr = addr;
                this.age = age;
            }

            // Minimum heap
            public int compareTo(Contact c) {
                return this.age - c.age;
                // Maximum heap
                // return -(this.age - c.age);
            }

            public String toString() {
                return "["+name+"]["+addr+"]["+age+"]";
            }
        }

        public class PriorityQueueHeap {
            public static void main(String[] args) {
                test1();
            }
            public static void test1() {
                System.out.println("Minimum/Maximum Heap PriorityQueue");
                PriorityQueue<Contact> miniHeap = new PriorityQueue<Contact>();
                miniHeap.add(new Contact("David", "U.S", 3));
                miniHeap.add(new Contact("John", "U.S", 4));
                miniHeap.add(new Contact("Micheal", "U.S", 6));

                while(!miniHeap.isEmpty()) {
                    System.out.println(miniHeap.remove().toString());
                }
            }
        }
    `]

    [Java LocalDateTime, java datetime, javatime, jtime, sort time, sorttime, compare time, comparetime, java localtime *j_date_time* ]
    `[

        import java.time.LocalDateTime;

        LocalDateTime time = LocalDateTime.parse("2007-12-03T10:15:30", DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        int year = time.getDayOfYear();
        Month month = time.getMonth();
        int  day = time.getDayOfMonth();
        int hour = time.getHour();
        int minute = time.getMinute();
        int second = time.getSecond();
        System.out.println("year=" + year + " month=" + month.name() + 
                           " day=" + day + "   hour=" + hour + " minute=" + minute + " second=" + second);
        System.out.println("");

        // create different datetime format
        DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/MM/yyyy-HH:mm:ss");
        LocalDateTime time1 = LocalDateTime.parse("30/09/1970-18:34:13", format);
        LocalDateTime time2 = LocalDateTime.parse("30/09/2008-18:33:34", format);
        LocalDateTime time3 = LocalDateTime.parse("30/09/1960-18:33:35", format);

        // use Collection to sort datetime without implementation of Compare or Comparable
        List<LocalDateTime> list = new ArrayList<LocalDateTime>(Arrays.asList(time1, time2, time3));
        Collections.sort(list);
        for(LocalDateTime t : list){
            System.out.println("year=" + t.getYear() + " month=" + t.getMonth() +
                    "  day=" + t.getDayOfMonth() + " hour=" + t.getHour() +
                    " minute=" + t.getMinute() + "  second=" + t.getSecond());
        }
    `]

    [NSTimer, nstimer, timer, xcode timer, xtimer *x_timer* ]
    `[
        NSTimer* _tickTimer;
        @property(nonatomic, retain)NSTimer* tickTimer;
        -(void)countineCountDownTimer{
            self.tickTimer = [NSTimer scheduledTimerWithTimeInterval:1
                                                                   target:self 
                                                                 selector:@selector(onTick:) 
                                                                 userInfo:nil 
                                                                  repeats:YES];
        }
        -(void)stopCountDownTimer{
            if (self.tickTimer != nil){
                [self.tickTimer invalidate];
                self.tickTimer = nil;
            }
        }
        // long _countDown;
        -(void)onTick:(NSTimer*)timer {
            if(_countDown > 0){
                _countDown--;
                if(_countDown == 0){
                }
            }
        }
    `] 

    [Xcode NSUserDefaults, xcode default user, xdefault, userdefault, defaultuser]
    `[
        NSUserDefaults only can use NSArray, NSDictionary, NSString, NSData, NSDate, NSNumber(intValue/floatValue/boolValue)
        NSUserDefaults returns immutable object event though mutable object is used
        For custom object, NSCoding protocol has to be implemented in order to use in NSUserDefaults
    `]

    [Xcode NSMutableArray, xarray, xnsarray, xnsmutablearray]
    `[
        NSMutableArray* array = [[NSMutableArray alloc] initWithCapacity:2];                              // convert int to NSNumber and NSNumber to int
        [array addObject:[NSNumber numberWithInt:4]];
        [array addObject:[NSNumber numberWithInt:5]];

        int x = [[array objectAtIndex:0] integerValue];
        int y = [[array objectAtIndex:1] integerValue];
        --------------------------------------------------------------------------------
        [array removeObjectAtIndex:index];
        --------------------------------------------------------------------------------
        [array removeAllObjects];
        --------------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc] initWithCapacity:2];                              // convert int to NSNumber and NSNumber to int
        [array addObject:@"dog"]; 
        [array addObject:@"cat"]; 
        String str0 = [array objectAtIndex:0]; 
        String str1 = [array objectAtIndex:1]; 
        ================================================================================
        [self.searchBar becomeFirstResponder];
        [self.searchBar resignFirstResponder];
        NSMutableArray* mutableArray = [NSMutableArray arrayWithArray:oldMutableArray];                  // copy mutable array copy array
        NSUInteger* myNSUInteger   = [myNSNumber integerValue];                                          // Convert NSNumber to NSUInteger
        --------------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc] initWithCapacity:10];
        NSMutableArray* arr1 = [[NSMutableArray alloc] initWithCapacity:2];
        NSMutableArray* arr2 = [[NSMutableArray alloc] initWithCapacity:2];

        [arr1 addObject:@"dog"];
        [arr1 addObject:@"cat"];

        [arr2 addObject:@"cat"];
        [arr2 addObject:@"dog"];

        [array addObject:arr1];
        [array addObject:arr2];
        [array containsObject:arr1]
        --------------------------------------------------------------------------------
        [arr3 addObject:[MyLib NumInt:1]];
        [arr3 addObject:[MyLib NumInt:2]];

        [arr4 addObject:[MyLib NumInt:2]];
        [arr4 addObject:[MyLib NumInt:1]];
        [array2 addObject:arr3];
        [array2 addObject:arr4];

        [array2 removeObject:arr3];
        [array2 removeObject:arr4];
        --------------------------------------------------------------------------------
        NSMutableArray* arrayNum = [[NSMutableArray alloc]initWithObjects:[MyLib NumInt:1], [MyLib NumInt:2], nil];
        NSMutableArray* arrayStr = [[NSMutableArray alloc]initWithObjects:@"1", @"2", nil];
        --------------------------------------------------------------------------------
        NSArray* nsarray        = [[NSArray alloc] initWithObjects:@"str1", @"str2", nil];
        NSMutableArray* muarray = [[NSMutableArray alloc]initWithArray:nsarray];
        NSArray* nsarray1       = [[NSArray alloc]initWithArray:nsarray];
        --------------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc]initWithCapacity:2]; // searchkey: NSMutableArray to NSArray 
        [array addObject:@"dog"];
        [array addObject:@"cat"];

        // NSMutableArray to array
        NSArray* nsarray = [array mutableCopy];
        for(NSString* str in nsarray){
            NSLog(@"str=[%@]", str);
        }
        --------------------------------------------------------------------------------
        NSUserDefaults* defaultUser = [NSUserDefaults standardUserDefaults];
        NSMutableArray* array = [NSMutableArray arrayWithCapacity:2];
        [array addObject:@"1"];
        [array addObject:@"2"];
        [array addObject:@"3"];

        [defaultUser setObject:array forKey:@"key"];
        NSMutableArray* myarray = [defaultUser objectForKey:@"key"];

        for(NSMutableArray* arr in myarray){
            NSLog(@"arr=[%@]", arr);
        }
        --------------------------------------------------------------------------------
        NSMutableDictionary* d1 = [[NSMutableDictionary alloc]initWithObjectsAndKeys:@"bg1.png",          @"bg",
                                                                        @"color_zero",      @"color_zero",
                                                                        @"color_non_zero",  @"color_non_zero",
                                                                        @"color_merge",     @"color_merge",
                                                                        @"color_stroke",    @"color_stroke",
                                                                        nil];

        NSMutableDictionary* d2 = [[NSDictionary alloc]initWithObjectsAndKeys:@"bg1.png",          @"bg",
                                                                        @"color_zero",      @"color_zero",
                                                                        @"color_non_zero",  @"color_non_zero",
                                                                        @"color_merge",     @"color_merge",
                                                                        @"color_stroke",    @"color_stroke",
                                                                        nil];

        NSMutableDictionary* dict = [[NSDictionary alloc]initWithObjectsAndKeys:
                                                                         d1, @"k1",
                                                                         d2, @"k2",
                                                                        nil];
        
        NSMutableDictionary* dd1  = [dict objectForKey:@"k1"];
        --------------------------------------------------------------------------------
        NSMutableDictionary* dict = [[NSMutableDictionary alloc]init];
        [dict setObject:@"obj1" forKey:@"k1"];
        [dict setObject:@"obj2" forKey:@"k2"];
        NSString* str = [dict objectForKey:@"k1"];
        XCTAssertTrue([str isEqualToString:@"obj1"]);

        // contain key 
        NSString* str1 = [dict objectForKey:@"kk"];
        XCTAssertTrue(str1 == nil);
        --------------------------------------------------------------------------------
        // sort dictionary
        NSMutableDictionary* dict = [[NSMutableDictionary alloc]initWithObjectsAndKeys:
                                                                            @"obj1",          @"1",
                                                                            @"obj0",          @"0",
                                                                            @"obj2",          @"2",
                                                                            nil];
        
        NSArray* array = [dict keysSortedByValueUsingComparator:^NSComparisonResult(id obj1, id obj2){
            return [obj1 compare:obj2];
        }];
        
        for(NSString* str in array){
            NSLog(@"key=[%@] obj[%@]", str, dict[str]);
        }
        --------------------------------------------------------------------------------
        // float/CGFloat as key in dictionary
        CGFloat f0 = 0.33;
        CGFloat f1 = 1.33;
        CGFloat f2 = 4.4400;

        NSMutableDictionary* dict = [[NSMutableDictionary alloc]initWithObjectsAndKeys:
                                     @"obj0",          [NSNumber numberWithFloat:f0],
                                     @"obj2",          [NSNumber numberWithFloat:f2],
                                     @"obj1",          [NSNumber numberWithFloat:f1],
                                     nil];
        
        NSArray* array = [dict keysSortedByValueUsingComparator:^NSComparisonResult(id obj1, id obj2){
            return [obj1 compare:obj2];
        }];
        
        for(NSString* str in array){
            NSLog(@"key=[%@] obj[%@]", str, dict[str]);
        }
        --------------------------------------------------------------------------------
        NSArray* array1 = @[@"dog", @"cat", @"cow"];
        NSSet* set33 = [NSSet setWithObjects:@"dog", @"cat", nil];
        NSSet* set44 = [NSSet setWithArray:array1];
        
        for(id item in set44){
            NSLog(@"%@", item);
        }
        
        
        NSMutableSet* set = [[NSMutableSet alloc]init];
        NSString* elem1 = @"str1";
        NSString* elem2 = @"str2";
        
        [set addObject:elem1];
        [set addObject:elem2];
        [set removeObject:elem1];

        NSMutableSet* set1 = [NSMutableSet setWithObjects:@"obj1", @"obj2", @"obj3", nil];
        
        NSMutableSet* set2 = [NSMutableSet setWithCapacity:2];
        [set2 addObject:@"obj1"];
        [set2 addObject:@"obj2"];
        
        // Predicate in NSMutableSet
        NSMutableSet* set3 = [NSMutableSet setWithObjects:@"Google", @"God", @"odd", nil];
        NSPredicate* startWithG = [NSPredicate predicateWithBlock:
                                   ^BOOL(id evaluatedObject, NSDictionary* bindings){
                                       if([evaluatedObject hasPrefix:@"G"]){
                                           return YES;
                                       }else{
                                           return NO;
                                       }
                                   }];
        [set3 filterUsingPredicate:startWithG];
        
        NSMutableSet* set4 = [NSMutableSet setWithObjects:@"Google", @"God", @"odd", nil];
        NSArray* array = [set4 allObjects];
        for(NSString* str in array){
            if([str hasPrefix:@"G"]){
                NSLog(str);
                [set4 removeObject:str];
            }
        }

        NSMutableSet* set11 = [NSMutableSet setWithObjects:@"Google", @"God", @"odd", nil];
        NSMutableSet* set12 = [NSMutableSet setWithObjects:@"Facebook", @"Apple", @"MS", nil];
        NSMutableSet* result = [NSMutableSet setWithCapacity:10];
        
        [result unionSet:set11];
        [result unionSet:set12];
        
        
        
        [result intersectSet:set11];
        
        [result minusSet:set11];
        
        NSCountedSet* countedSet = [NSCountedSet setWithCapacity:5];
        [countedSet addObject:@"dog"];
        [countedSet addObject:@"cat"];
        [countedSet addObject:@"dog"];

        // #NSNumber
        -------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc]init];
        [array addObject:[NSNumber numberWithChar:'c']];
        char ch = [array[0] charValue];
        XCTAssertTrue(ch == 'c');
        
        NSMutableArray* arr1 = [[NSMutableArray alloc]init];
        [arr1 addObject:[NSNumber numberWithBool:false]];
        BOOL isTrue = [arr1[0] boolValue];
        XCTAssertTrue(isTrue == false);
        
        for(id ch in array){
            NSLog(@"[%@] [%@]", ch, [NSString stringWithFormat:@"%c", 'a']);
        }
        + (NSNumber *)numberWithChar:(char)value;
        + (NSNumber *)numberWithUnsignedChar:(unsigned char)value;
        + (NSNumber *)numberWithShort:(short)value;
        + (NSNumber *)numberWithUnsignedShort:(unsigned short)value;
        + (NSNumber *)numberWithInt:(int)value;
        + (NSNumber *)numberWithUnsignedInt:(unsigned int)value;
        + (NSNumber *)numberWithLong:(long)value;
        + (NSNumber *)numberWithUnsignedLong:(unsigned long)value;
        + (NSNumber *)numberWithLongLong:(long long)value;
        + (NSNumber *)numberWithUnsignedLongLong:(unsigned long long)value;
        + (NSNumber *)numberWithFloat:(float)value;
        + (NSNumber *)numberWithDouble:(double)value;
        + (NSNumber *)numberWithBool:(BOOL)value;
        + (NSNumber *)numberWithInteger:(NSInteger)value NS_AVAILABLE(10_5, 2_0);
        + (NSNumber *)numberWithUnsignedInteger:(NSUInteger)value NS_AVAILABLE(10_5, 2_0);
        -------------------------------------------------------------------------
        // #Compare two NSNumber
        - (NSComparisonResult)compare:(NSNumber *)otherNumber;
        - (BOOL)isEqualToNumber:(NSNumber *)number;
    `]

    
    [Xcode Format String]
    `[
            nformatting
            --------------------------------------------------------------------------------
            // one decimal for float
            NSString* strFormat = [NSString stringWithFormat:@"[%.01f][%.01f]", xcolor.blue, xcolor.alpha];
            --------------------------------------------------------------------------------
            %@ Objective-C object, printed string returned by descriptionWithLocale
            %% '%' character.
            %d, %D Signed 32-bit integer (int).
            %u, %U Unsigned 32-bit integer (unsigned int).
            %x Unsigned 32-bit integer (unsigned int), printed in hex using 0–9 and a–f.
            %X Unsigned 32-bit integer (unsigned int), printed in hex using 0–9 and A–F.
            %o, %O Unsigned 32-bit integer (unsigned int), printed in octal.
            %f 64-bit float (double).
            %e 64-bit float (double), e exponent.
            %E 64-bit float (double), E exponent.
            %g 64-bit float (double), %e if exponent < – 4 or >= to the precision, %f o.w.
            %G 64-bit float (double), %E if exponent < – 4 or >= to the precision, %f o.w.
            %c 8-bit unsigned character
            %C 16-bit Unicode character
            %s Null-terminated array of 8-bit unsigned characters.
            %S Null-terminated array of 16-bit Unicode characters.
            %p Void pointer (void *), printed in hex with the digits 0–9 and a–f, with a leading 0x.
            %a 64-bit float, leading 0x and one hex before decimal pt using p as exp.
            %A 64-bit float, leading 0X and one hex before decimal pt using P as exp.
            %F 64-bit float, printed in decimal notation.
            %d bool stype
            
    `]

    [xcode file, read file, write file, xcode read file, xcode write file, x write file, x read file]
    `[
            --------------------------------------------------------------------------------
            NSFileManager* fileManager = [[NSFileManager alloc]init];
            NSString* path = @"/dog/cat";
            NSString* name = @"file.txt";
            --------------------------------------------------------------------------------
            NSString* fullPath = [path stringByAppendingPathComponent:name];
            --------------------------------------------------------------------------------
            NSString* str1 = @"str1";
            NSString* str2 = @"str2";
            NSString* catStr = [str1 stringByAppendingString:str2];
            --------------------------------------------------------------------------------
            NSArray* docPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
            NSString* documentDirectory = [docPath objectAtIndex:0];
            NSLog(@"documentDirectory=%@", documentDirectory);
            --------------------------------------------------------------------------------
            NSArray* cashesDirArr = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
            NSString* cashesDir = [cashesDirArr objectAtIndex:0];
            NSLog(@"cashesDir=%@", cashesDir);
            --------------------------------------------------------------------------------
            NSArray* downloadDirArr = NSSearchPathForDirectoriesInDomains(NSDownloadsDirectory, NSUserDomainMask, YES);
            NSString* downloadDir = [downloadDirArr objectAtIndex:0];
            NSLog(@"downloadDir=%@", downloadDir);
            --------------------------------------------------------------------------------
            NSString* deleteComponent = [@"/dog/cat/cow" stringByDeletingLastPathComponent];
            NSLog(@"deleteComponent[%@]", deleteComponent);
            --------------------------------------------------------------------------------
            NSString* lastComponent = [@"/dog/cat/cow" lastPathComponent];
            NSLog(@"lastComponent[%@]", lastComponent);
            --------------------------------------------------------------------------------
            NSString* noExtPath = [@"/dog/cat/cow.txt" stringByDeletingPathExtension];
            NSLog(@"noExtPath[%@]", noExtPath);
            --------------------------------------------------------------------------------
            // create file from NSString
            NSError* error;
            NSString* strData = @"Convert String to NSData";
            NSData* dataBuffer = [strData dataUsingEncoding:NSUTF8StringEncoding];
            NSString* filePath = [documentDirectory stringByAppendingPathComponent:@"myfile.txt"];
            --------------------------------------------------------------------------------
            //[fileManager copyItemAtPath:screenShotImageFile toPath:fullPath error:&error];
            [dataBuffer writeToFile:filePath atomically:YES];
            NSLog(@"filePath[%@]", filePath);
            --------------------------------------------------------------------------------
            // copy file, copy data, copy string
            NSString* newFilePath = [documentDirectory stringByAppendingPathComponent:@"newfile.txt"];
            [fileManager copyItemAtPath:filePath toPath:newFilePath error:&error];
            NSLog(@"newFilePath[%@]", filePath);
            --------------------------------------------------------------------------------
            // create empty file, create file 
            NSString* emptyFilePath = [documentDirectory stringByAppendingPathComponent:@"emptyfile.txt"];
            [fileManager createFileAtPath:emptyFilePath contents:nil attributes:nil];
            NSLog(@"emptyFilePath[%@]", emptyFilePath);
            --------------------------------------------------------------------------------
            // write to file
            NSString* myString = @"write to file";
            NSString* myEmptyFile = [documentDirectory stringByAppendingPathComponent:@"myempty.txt"];
            [fileManager createFileAtPath:emptyFilePath contents:nil attributes:nil];
            [myString writeToFile:myEmptyFile atomically:YES encoding:NSUTF8StringEncoding error:nil];
            NSLog(@"myEmptyFile[%@]", myEmptyFile);
            --------------------------------------------------------------------------------
            // read NSString from file, read from file
            NSString *contents = [NSString stringWithContentsOfFile:myEmptyFile];
            NSLog(@"contents=[%@]", contents);
            --------------------------------------------------------------------------------
            // read NSData from file, read data from file
            NSData* dataContents = [NSData dataWithContentsOfFile:myEmptyFile];
            NSString* myStr1 = [[NSString alloc] initWithData:dataContents encoding:NSUTF8StringEncoding];
            NSLog(@"myStr1=[%@]", myStr1);
            --------------------------------------------------------------------------------
    `] 

    [Remove CAShaperLayer from parent Layer CALayer]
    `[
        CAShapeLayer* circleLayer = [CAShapeLayer layer];
        circleLayer.name = @"circle";
        CGFloat leftX = 100.0f;
        CGFloat leftY = 100.0f;
        CGFloat Width = 50.0f;
        CGFloat Height = 50.0f;
        UIBezierPath* path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(leftX, leftY, Width, Height)];
        [circleLayer setPath:[path CGPath]];
        
        CGFloat component[4];
        component[0] = 100.0;
        component[1] = 1.0;
        component[2] = 2.0;
        component[3] = 2.0;
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        [circleLayer setStrokeColor:CGColorCreate(colorSpace, component)];
        [circleLayer setLineWidth:1.0f];
        [circleLayer setFillColor:[[UIColor brownColor] CGColor]];

        for(CAShapeLayer* layer in [self.window.layer.sublayers copy]){
            if([[layer name] isEqualToString:@"circle"]){
                [layer removeFromSuperlayer];
            }
        }
    `]

    [Gnuplot script, run Gnuplot, persist, gnuplot commandline]
    `[
        1. script 
        - 1. Create script called hello.gp 
        - 2. Put sin(x) inside the hello.gp file, yep, only sin(x)
        - 3. Goto command line and run > gnuplot -p hello.gp  [-p for persist]
    `] 

    [Latex tricks]
    `[
        % no indention noindent for all pages 
        \setlength\parindent{0pt}
        \noindent

        gr_greek_letter : *.tex,*.html  
        \begin{tabular}{|c|c|c|c|c|c|c|c|} \hline
        alpha    & $\alpha$    & theta   & $\theta$   & tau        & $\tau$        & beta   & $\beta$   \\ \hline
        vartheta & $\vartheta$ & pi      & $\pi$      & upsilon    & $\upsilon$    & gamma  & $\gamma$  \\ \hline
        varpi    & $\varpi$    & phi     & $\phi$     & delta      & $\delta$      & kappa  & $\kappa$  \\ \hline
        rho      & $\rho$      & varphi  & $\varphi$  & epsilon    & $\epsilon$    & lambda & $\lambda$ \\ \hline
        varrho   & $\varrho$   & chi     & $\chi$     & varepsilon & $\varepsilon$ & mu     & $\mu$     \\ \hline
        sigma    & $\sigma$    & psi     & $\psi$     & zeta       & $\zeta$       & nu     & $\nu$     \\ \hline
        varsigma & $\varsigma$ & omega   & $\omega$   & eta        & $\eta$        & xi     & $\xi$     \\ \hline
        Gamma    & $\Gamma$    & Lambda  & $\Lambda$  & Sigma      & $\Sigma$      & Psi    & $\Psi$    \\ \hline
        Delta    & $\Delta$    & Upsilon & $\Upsilon$ & Omega      & $\Omega$      & Theta  & $\Theta$  \\ \hline
        Pi       & $\Pi$       & Phi     & $\Phi$     & 0          & 0             & 1      & 1         \\ \hline
        \end{tabular} 
    `] 

    [Asymptote inside Latex, config file, svg file, asy]
    `[
        1. Use Asymptote inside Latex
        2. Use \usepackage[inline]{asymptote}
        3. Use \begin{asy} ... \end{asy} tag 

        4. Compile Asymptote inside Latex (e.g. mydraw.tex)
        - 1. pdflatex mydraw.tex 
        - 2. asy mydraw-1.asy
        - 3. pdflatex mydraw
        - 4. open mydraw.pdf

        5. output file pdf or svg [e.g. code] 
        settings.outformat = "svg";
        settings.outformat = "pdf";
        label("Hello world!");

        6. Add ~/.asy/config.asy file to your home dir [e.g. config.asy file]
        import settings;
        dvisvgm="/usr/local/texlive/2013/bin/x86_64-darwin/dvisvgm";    // dvisvgm convert dvi file to XML svg file
        you might get following error, but you can ignore it once you add the dvisvgm path to cofig.asy
        [processing of PostScript specials is disabled (Ghostscript not found)]
    `] 

    [How to use Mutt to add attachment to email, awesome tips for Mutt]
    `[
        1. In your main email screen
        2. Pree a to select attachment
        3. Pres <space> to open home directory
        4. Pres / to search files directories
    `] 


    [Vim undolist]
    `[
        set undofile                " Save undo's after file closes
        set undodir=$HOME/.vim/undo " where to save undo histories
        set undolevels=1000         " How many undos
        set undoreload=10000        " number of lines to save for undo
    `] 

    [Vim Regex ObjectiveC, vim objectivec, vimobjectivec, objectivec method, objectivemethod]
    :replace [array objectAtIndex:index] with array[index] in ObjectiveC
    `[
        %s/\[\(\w\+\)\s\+objectAtIndex:\([^]]\+\)\]/\1\[\2\]/gc
    `]

    [Vim Copy text from vim to clipboard] [:h clipboard]
    `[
        "* is special Register that stores selection
        "*y Copy text from vim to clipboard
        "*p Paste text from clipboard to vim 
    `]

    [tmux key]
    `[
        [` c => new window ]
        [` n => next window]
        [` ? => help key ]
    `] 

    [vim command ]
    `[
        :setlocal spell     // enable spell check, spelling checking, enable dictionary 
        *v_newline* *vnewline* [:h <CR>]
        :<C-V><C-M>  // add newline to string in insert mode

        // searchkey: vim completion, completefunc 
        :<C-X><C-L> // line completion 
        :<C-X><C-F> // file name completion 
        :<C-X><C-U> // define your own completefunc function 

        :CTRL-O     //Jump Older cursor position in jump list [:h jumps]
        :CTRL-I     //Jump newer cursor position in jump list backward

        :vimgrep /MyString/ /home/mycode/**/*.m   // Search MyString pattern recursively[**/*.m] two arsterisks 
        :copen      // Open your quickfix 
        :gf         // open the file under the currsor

        :find will search the directories/files in path option [:h :find]
        :vim $(find ./ -name \*.java -print)                // open all java file from find
        :set path? //will show current path option [:h path]
        :set path +=/home/mycode //You can add different directories to path option in Vim
        
        " reset to default
        :set path& [:h set]

        :set complete=k/home/myfile/*,k~/home/dir
        " auto completion search your own file
        " [:h complete]
        " k{dict} scan the file {dict}. Servan flags can be given

        In Vim Script, there are many options to handle file names, paths   
        :h cmdline

        :wincmd p       // switch back to previous buffer, switch buffer, change buffer
        :bufdo e!                                                                                       // Save reload all buffers :syntax on  to enable syntax highlight
        :bufdo %s/pattern/replacement/ge | update                                                       // vim replace all buffers, update all, replace all
        :zf                // Create fold under cursor
        :zd                // Delete fold under cursor
        :5gt               // goto tab 5, [in insert mode]
        :tabmove 4         // move the current tab to position 4 [help :tabmove]
        :tabc 11           // close tab 11

        :set modeline      // display file name in each tabs page
        :set ls=2

        :set modeline      // display full file name in statusline [:help :statusline]
        :set statusline=%F

        :Align \*\zs\s\+ =                                                                              // *'  ' and '=' separator
        :\%V                                                                                             // visual selection block [:help \%V]
        :'<,>'sort /\ze\%V/                                                                             // sort all selected lines in visual mode
        :'< and >'                                                                  // first cursor position/last cursor position in registers in visual mode/selection

        :g/^$/d                             //delete empty line 
        :let @a=substitue(@a, 'pattern', 'sub', 'g')                                                    // substitute 'pattern' with 'sub' in register @a 
        :q: or q/                          // vim command history

        :hi Search guifg=Brown guibg=Gray
        :hi Search cterm=Brown ctermbg=Gray                                                             // change search backgroun/foreground [:h hl-Search]

        :sort n                            //sort lines by the first digital in the line, [n] is first decimal number, [x] is first hexadecimal number [:help :sort]
        :sort! n                           //reverse sorting

        :syn match MyKeyWord /MyName/               //Highlight defined keyword [:help syn-match]
        :highlight MyKeyWord guifg=Green 
        :'<,'>s/^\s*\zs\w/#\0/gc        //comment all selected lines in python
        :set ma                             // set file modifiable on  [:h modifiable]
        :ctrl-]                              //class definition 
        :ctrl-t                              //back to previous window
        :s/pattern/\=@a.submatch(0).@b/gc   // substitute with two registers

        :redir @a // redirect ex command to register
        :ls
        :redir END
        :redir @* | ls | redir END  // redirect all the name of file to reg @* in buffer
        :tabmove 4                                                                                      // move the current tab to position 4 [help :tabmove]
        :/pattern\c #ignorecase
        :hi clear SpellBad # Reset SpellBad bad spell highlight to default
        :g/-\s*(\w\+)\w+/z#.1                                                                           // print all xcode methods with line number #
        :/\(if\)\ze\(then\)         // if follows then "[if]then"
        :/\(if\)\zs\(then\)         // then starts with if "if[then]" 
        :g*         / search without word boundry
        :bd *.html  <C-a>           // delete all buffer files with *.html name
        :2,4bd                      // delete all buffers from 2 to 4 
        :echo synIDattr(synIDtrans(hlID("Normal")), "bg") [:h hlID]                                     // vim Script get background color
        :set hidden   // hidden an unsaved file, ow, file has to be saved with !

        :his s                      // list commands history
        :his /                      // list search history

        :CTRL-E                     // scroll window up 
        :CTRL-Y                     // scroll window down

         // display without Enter
         exec '!ls ' 
         :sleep 2
         redraw

         :diw // delete/yank/visual [i]nner word
         :daw // delete/yank/visual [a] word
         :dib // delete/yank/visual [i]nner '(' ')' block
         :daB // ddelete/yank/visual [a] '(' ')' block
         :diB // ddelete/yank/visual [i]nner '{' '}' block
         :daB // ddelete/yank [a] '{' '}' block

         :syntax region MyColorGroup start=/\%2l/ end=/\%10l/
         :syntax clear MyColorGroup                           // remove highlight
         :%!column -t                                         // format text  ref: https: // sanctum.geek.nz/arabesque/advanced-vim-macros/

        :map   :noremap   :unmap  => Normal, Visual, Select, operator-pending
        :vmap  :vnoremap  :vunmap => Visual and Select
        :cmap  :cnoremap  :cunmap => Command-line
        :imap  :inoremap  :iunmap => Insert
        :map!  :noremap!  :unmap! => Insert, Command-line
        :xmap  :xnoremap  :xunmap => Visual

        :<C-r><C-w>                => insert word under cursor
        :<C-r>=                    => insert evaluate expression in Insert mode
        :<C-r>=line(".")           => insert current line number
        :<C-r><C-r>%               => insert register context %, file name
        :<C-r><C-r>#               => insert Register context #, full path, not always have alternative path
        :<C-r>+                    => insert "* context
        :<C-r>*                    => save thing, insert "* context
        :map <F3>  <C-r>=line(".") => map F3 to function line(".")

        *v_hl* *highlight* *v_highlight* *h_search* *search_hl* 
        highlight Search ctermfg=none ctermbg=yellow
        highlight Search ctermfg=none ctermbg=gray
        highlight Search ctermfg=none ctermbg=green
        highlight Search ctermfg=none ctermbg=white
    `] 

    [Grep command]
    :vim $(grep -l --include="*.java" pattern .)    
    :grep --color -Hnirs class\s\+\w\+\s\+\(extends\s\+[A-Za-z_\]\+\)*\s\+\(implements\s\+\([A-Za-z_\]\+\)\)\?\(\s\+\)*\(,\s\+[A-Za-z_\]\+\)*  
    :grep --include="*.java" "\"[a-zA-Z]\+\""  ./   
    :vim $(grep -l --include="*.java" pattern .) #vim open all files from grep
    :grep -l pattern *   [print file name only]
    :grep --include="*.[mh]"  --color -Hnris CATextLayer

    [ *v-script* *v_scri* vimscript, vimscr, vim script]
    `[
        " Fix the missing -cp option in java
        " Assume java file is in current buffer
        function! CompileJava()
            let path = expand("%")
            exec ":!javac " . path <CR> 
            let jclassName = expand("%:p:t:r")
            let className = expand("%:p:t:r")
            let cwd = getcwd()
            let full = ":!java -cp " . cwd . ":. " . jclassName
            exec  full 
        endfunction 

        :str =~ "n"    //compare string, return 1 if str == "n" else return 0
        if str =~ "\s*"
            " str is empty or whitespace
        endif

        *expand-example*
        :expand("%")       => file.txt
        :expand("%:p")     => /home/file.txt
        :expand("%:p:t")   => file.txt
        :expand("%:p:r")   => /home/file
        :expand("%:p:t:r") => file
        :fnamemodify('/dog/f.txt', ':h') => /dog

        " get current file dir
        :getcwd()
        "/home

        " read file
        :readfile(fname)

        " check whether a file with the name exists 
        :filereadable(fname)

        " write file
        :writefile(fname, "a") 
        :writefile(fname, "b") "b" binary mode

        [:h Dictionary]
        " dictionary
        let dict={'key': 'value'}

        " replace value 
        dict.key = 'dog'

        " Iterate through Dictionary
        for [key, value] in items(dict)
          echo key . ':' . value 
        endfor

        " remove key
        let value = remove(dict, 'key')
        echo value  " dog

        [:h List]
        " list as value
        let list = ['a', 'b']
        add(dict.key, 'abc')
        echo dict.key   " ['a', 'b', 'abc']


        " list, string, length, len
        let list = []
        let list = ["cat", "dog"]
        let len = len(list)
        let fname = split(expand("%:p"), "/")
        let length = length("this is cool") 

        " remove list item
        :unlet list[3] " remove fourth item
        :unlet list[3:] " remove foruth to last

        " remove dictionary item
        :unlet dict['two'] 
        :unlet dict.two

        " This is especially useful to clean up global variables 
        :unlet global_var

        " sort a list
        let list = ['b', 'a']
        sort(list)

        " sort a list in-place, a list remain unmodified
        let copylist = sort(copy(list))

        " Iterate buffer list
        let bufcount = bufr("$")
        let curr = 1 
        while curr <= bufcount 
            let currbufname = bufname(curr)
            if buflisted(currbufname) && strlen(currbufname) > 0
                echo currbufname
            endif
            let curr = curr + 1
        endwhile


        " Iterate through List
        for item in mylist
          echo item
        endfor 

        " for loop
        let index = 0
        while index < len(mylist)
          echo mylist[index]
          let index = index + 1
        endwhile

        " list of open windows
        :echo range(1, winnr('$'))

        " To determine how many split-windows are open
        winnr('$')

        " How many in the current page
        tabpagewinnr(tabpagenr(), '$')
        
        http://vim.1045645.n5.nabble.com/how-to-get-list-of-open-windows-td1164662.html
        " List all split window by tab page 
        while t <= tabpagenr('$') 
                echo 'tab' t . ':' 
                let bufs = tabpagebuflist(t) 
                let w = 0 
                while w < tabpagewinnr(t, '$') 
                        echo "\t" . bufname(bufs[w]) 
                        let w += 1 
                endwhile 
                let t += 1 
        endwhile 
        unlet t w bufs 

        " split window on the right hand side
        :set splitright 

        " statusline format
        %-0{minwid}.{maxwid}{item}
        The - forces the item to be left aligned
        The 0 forces numeric value to be left padded with zeros

        " statusline evaludate function
        statusline+=%10{expand('%:p:h')}

        // vim variable
        b:	  Local to the current buffer.
        w:	  Local to the current window.
        t:	  Local to the current tab page.
        g:	  Global.
        l:	  Local to a function.
        s:	  Local to a :source ed Vim script.
        a:	  Function argument (only inside a function).
        v:	  Global, predefined by Vim.

        :let l:pos = getpos(".")    // keep cursor position, restore cursor position
        :call setpos(".", l:pos)
        
        :filter /^\u\w\+/ cab    // show all first letter of command abbreviations is uppercase. 

        *v_dict*  *vscr_dict* *vim_dict*
        :if has_key(dict, 'foo')	" TRUE if dict has entry with key "foo"
        :if empty(dict)			" TRUE if dict is empty
        :let l = len(dict)		" number of items in dict
        :let big = max(dict)		" maximum value in dict
        :let small = min(dict)		" minimum value in dict
        :let xs = count(dict, 'x')	" count nr of times 'x' appears in dict
        :let s = string(dict)		" String representation of dict
        :call map(dict, '">> " . v:val')  " prepend ">> " to each item

        *v_change_dir* *v_dir*
        :autochdir acd noautochdir
    `]

    [fish shell ]
    `[
        brew install fish
        install fish shell 2.3.1
        create symbol link 
        ln -s /usr/local/bin/fish /bin/fish
        add /bin/fish to /etc/shells.

        brew location 
        🍺  /usr/local/Cellar/fish/2.3.1: 786 files, 5.9M
    `] 

    [Linux command *linux-command* ]
    :y$                                             // copy character from cursor to the end of line     [:help yank]
    :vaw                                            // highlight word under cursor including white space [:help text-object]
    :viw                                            // hightlight word under cursor excluding white space[:help text-object]
    :awk '{for(i=0; i<NF; i++) print $1}' inputfile // print the first column from file>
    :awk -F ":" '{for(i=0; i<NF; i++) print $1}'
    :kill -9 $(ps aux | awk '/Safari/ {print $2}')  // kill Safari brower

    :history -d  xxx #remove history
    :add to vimrc file #vim change tabs to space
    :set tabstop=4
    :set shiftwidth=4
    :set expandtab
    :set showcmd

    :sed 's/.*\(Name=\"[^"]*\"\)\s\(ContentFolder=\"[^"]*\"\).*/\1 \2/g' /tmp/c.txt  > /tmp/norm.txt // Match Name=xxx  and ContentFolder=xxx two columns
    :sed -i -e 's/oldstring/newstring/g' *      // replace oldstring to newstring, replace all, sed replace
    :find . -name "*" | xargs -n1 perl -i -ane 's/images/img/g; print;'
    :find . -name "*.txt" -type f  -print0 | xargs -0 echo  
    :find . -name "*.m" -exec sed -i backup 's/old/new/g' {} +         // backup is extension for backup file, got unknown primary or operator error
    :find . -name "*.m" -exec sed -i '' 's/SimpleApp/DeviceInfoApp/g' '{}' \;   // man find exec 
    :find . -name "abc*" ! -name "*.cpp"    // file start with abc except all *.cpp file
    :find . -name "*.txt" -o -name "*.cpp"  // -o OR operator
    :find . -name "*.txt" -exec rm -f {} \; // remove all *.txt
    :find . -maxdepth 1 -type f -perm +111 -exec rm -f {} \; // remove all executable files in curr dir
    :sudo /usr/libexec/locate.updatedb      // update locate command, update database, update db

    [shell script, shellscript]
    `[
        If else statement, Compare string, Compare integer

        if [ $# -gt 0 ]; then 
            echo "arg $1"
            if [ $1 = "w" ]; then
                echo "do sth" 
            elif [ $1 = "t" ]; then 
                echo "do other th" 
            fi 
        else
            echo "Usage"
        fi

        timestamp=$(date "+%Y-%m-%d-%H-%M-%S")  # time stamp
        echo $timestamp

        # shell loop
        for i in *; do echo $i; done     # shell loop
        for i in {1..10}; do echo $i; done 

        # change dir, spawn a new shell
        cd newdir 
        exec /bin/bash 

        // passing parameter containing space, contains space, contain space, parameter space, param space, argument space
        #!/bin/bash
        arr=("$@")
        para0=${arr[0]}
        para1=${arr[1]}
        para2=${arr[2]}
        echo 'para0='"$para0"
        echo 'para1='"$para1"
        echo 'para2='"$para2"
        #-------------------------------------------------------------------------------- 
        # script "p1" "dog cat" "cow"
        # output:
        #-------------------------------------------------------------------------------- 
        #para0=p1
        #para1=dog cat
        #para2=cow

        :command 1 > /etc/null   # redirect stdout to /etc/null
        :command 2 > /etc/null   # redirect stderr to /etc/null
        :command 2 > &1          # redirect stderr to stdout
        :command & > file        # redirect stderr and stdout to file

        *shell_arg* *shell_argument* 
        #Shell crazy symbol
        for arg in $* 
        do
        echo "[\$*]=".$arg
        done 
        #[$*]=.n1
        #[$*]=.n2
        #[$*]=.n3

        for arg in "$*" 
        do
            echo "[\$*]=".$arg
        done
        #[$*]=.n1 n2 n3

        for arg in $@ 
        do
            echo "[\$@]=".$arg
        done
        #[$@]=.n1
        #[$@]=.n2
        #[$@]=.n3

        for arg in "$@"
        do
            echo "[\$@]=".$arg
        done
        #[$@]=.n1 n2
        #[$@]=.n3

        // profile bashrc share environment variables user and root, share variable
        /etc/profile
    `]


    [iOS Game Development]
    {{ src=image/gameOption.png w=50% h=50% }}
    {{ src=image/gridgrid.png w=50% h=50% }}


    [Command tricks]
    `[
            rename file names with php script  // /Users/cat/myfile/github/php/rename.php
            Change default location of Mac OSX screenshots, Open your Terminal and type:
                    defaults write com.apple.screencapture location ~/myScreenShots
            And type:
            killall SystemUIServer

            Rename file name of default screenshots in Mac OSX, Open your Terminal and type:
                defaults write com.apple.screencapture name "myName"
            And type:
                killall SystemUIServer

            Print method name in Xcode/iOS:
            NSLog(@"%s", __PRETTY_FUNCTION__);

            Compile Vim with Python support so that you can use clang_complete plugin for Clang family languages such as C/C++/ObjectiveC
            I clone vim from github and compile it, but I have hard time to compile it.
            One simple solution is to use macport, here is the command  
            sudo port install vim +python27
             
            To find the clang on your Mac
            xcrun -find clang

            // clang path
            your output:
            /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang

            locate libclang.dylib
                /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib

            you need to set the path in your .vimrc file:
            let g:clang_library_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'


            port selfupdate[macport usage]
            port install povray[install povray]

            log all terminal screen[Mac OS X, Linux]
            script screen.log
    `]

    [Change Terminal screen color on MacOS]
    `[
        Command+i   // bring up the window
        Setting     // select your favour color theme
    `] 
    {{ src=image/colortheme.png w=50% h=50% }}

    [Chrome ShortCut key]
    `[
        Command+Option+B	// Chrome Opens the bookmark manager.
        Command+Y           // Chrome Opens history page
    `]
    {{ src=image/convertpoint.png w=50% h=50% }}

    [Xcode touches]
    `[
        // searchkey: disable/enable touch events
        [[UIApplication sharedApplication]beginIgnoringInteractionEvents]; 
        [[UIApplication sharedApplication]endIgnoringInteractionEvents]; 

        // searchkey: convert point to diff layer 
        CGPoint newPoint = [_gView.layer convertPoint:touchXY toLayer:_gridLayer];  

        - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
            NSLog(@"%s", __PRETTY_FUNCTION__);
            UITouch* touch = [touches anyObject];
            if(touch != nil){
                _initXY = [touch locationInView:touch.view];
                NSString* mytext = [NSString stringWithFormat:@"[%.01f][%.01f]", _initXY.x, _initXY.y];
                [_myLabel setText:mytext];
            }
        }
        - (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event{
            UITouch* touch = [touches anyObject];
            if(touch != nil){
                CGPoint currXY = [touch locationInView:touch.view];
                NSString* mytext = [NSString stringWithFormat:@"[%.01f][%.01f]", currXY.x, currXY.y];
                _center.x = _center.x + (currXY.x - _initXY.x); 
                _center.y = _center.y + (currXY.y - _initXY.y); 

                UIBezierPath* path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(_center.x-50, _center.y-50, 100, 100)];
                [_circleLayer setPath:[path CGPath]];
                [_circleLayer setFillColor:[[UIColor brownColor] CGColor]];
                [_myLabel setText:mytext];
                _initXY = currXY;
            }
        }
        - (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event{
            NSLog(@"%s", __PRETTY_FUNCTION__);
            UITouch* touch = [touches anyObject];
            if(touch != nil){
                CGPoint touchXY = [touch locationInView:touch.view];
                NSString* mytext = [NSString stringWithFormat:@"[%.01f][%.01f]", touchXY.x, touchXY.y];
                [_myLabel setText:mytext];
            }
        }

    `]

    [Xcode UIButton button]
    `[ 
        UIButton* mybut = [UIButton buttonWithType:UIButtonTypeSystem];
        CGRect frame = CGRectMake(100, 450, 140, 50);
        mybut.frame = frame;
        [mybut addTarget:self action:@selector(clickMe:) forControlEvents:UIControlEventTouchUpInside];
        [mybut setTitle:@"Rotate" forState:(UIControlState) UIControlStateNormal];
        [mybut setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [mybut.titleLabel setFont:[UIFont boldSystemFontOfSize:14]];
        mybut.backgroundColor = [UIColor brownColor];
        [self.window addSubview:mybut];

        -(void)clickMe:(id)sender{
            NSLog(@"Click me");
        }

        // UILabel
        // searchkey: create simple text label
        -(void)createLabel{
            CGSize size       = [UIScreen mainScreen].bounds.size;
            NSInteger bwidth  = 300;
            NSInteger bheight = 40;
            CGPoint upLeft = CGPointMake(size.width/2 - bwidth/2, 10);
            _labelTimer = [[UILabel alloc] initWithFrame:CGRectMake(upLeft.x, upLeft.y, bwidth, bheight)];
            [_labelTimer setTextColor:[UIColor redColor]];
            [_labelTimer setBackgroundColor:[UIColor clearColor]];
            [_labelTimer setFont:[UIFont fontWithName: @"Trebuchet MS" size: 20.0f]];
            [_labelTimer setText:@"This is my Label"];
            [self.window addSubview:_labelTimer];
        }

        // animation
        // searchkey: create CABasicAnimation animation  
        //[layer addAnimation:rotationAnimation forKey:@"rotationAnimation"];
        -(CABasicAnimation*)createAnimation{
            CGFloat duration = 3.0;
            CGFloat repeat = 1.0;
            CABasicAnimation* rotationAnimation;
            rotationAnimation = [CABasicAnimation animationWithKeyPath:@"transform.rotation.z"];
            rotationAnimation.toValue = [NSNumber numberWithFloat: M_PI * 2.0];
            rotationAnimation.duration = duration;
            rotationAnimation.cumulative = YES;
            rotationAnimation.repeatCount = repeat;
            return rotationAnimation;
        }
    `]

    [Xcode load image ]
    `[
        CGRect originalFrame = CGRectMake(50, 10, 200, 200);
        CGRect frame = CGRectMake(50, 250, 100, 100);
        self.view.backgroundColor = [UIColor grayColor];

        UIImageView* oriImageView = [[UIImageView alloc]initWithFrame:originalFrame];
        UIImage* oriImage = [UIImage imageNamed:@"drawing.png"];
        oriImageView.image = oriImage;
        [self.view addSubview:oriImageView];
    `]

    [Xcode Cartesian Coordinate System]
    `[
        // pass self.view.layer 
        -(void)CartesianCoordinate:(CALayer*)layer{
            CGSize size          = [UIScreen mainScreen].bounds.size;
            
            CAShapeLayer* shapeLayer = [CAShapeLayer layer];
            UIBezierPath* path = [UIBezierPath bezierPath];
            
            // Vertical line
            [path moveToPoint:CGPointMake(size.width/2, 0)];
            [path addLineToPoint:CGPointMake(size.width/2, size.height)];
            
            // Horizontal line
            [path moveToPoint:CGPointMake(0, size.height/2)];
            [path addLineToPoint:CGPointMake(size.width, size.height/2)];
            
            shapeLayer.path = [path CGPath];
            shapeLayer.strokeColor = [[UIColor blackColor] CGColor];
            shapeLayer.fillColor = [[UIColor brownColor] CGColor];
            shapeLayer.lineWidth = 1.0f;
            [layer addSublayer:shapeLayer];
        }
    `]

    [Xcode draw rectangle]
    `[
        // xcode draw rectangle
        // CAShapeLayer* _rectLayer;
        // _rectLayer = [CAShapeLayer layer];
        -(void)drawRectangle{
            CGFloat width = 100.0;
            CGFloat height = 100.0;
            CGSize size          = [UIScreen mainScreen].bounds.size;
            CGFloat offset = 50.0;
            CGPoint centerPoint = CGPointMake(size.width/2 - width/2, size.height/2 - height/2 + offset);

            UIBezierPath* path = [UIBezierPath bezierPathWithRect:CGRectMake(centerPoint.x, centerPoint.y, width, height)];
            _rectLayer.lineWidth = 10.0f;
            _rectLayer.strokeColor = [[UIColor darkGrayColor] CGColor];
            [_rectLayer setFillColor:[[UIColor clearColor] CGColor]];
            [_rectLayer setPath:[path CGPath]];
            [self.window.layer addSublayer:_rectLayer];
            //[self.view.layer addSublayer:_rectLayer];
        }
    `]
    
    [Xcode]
    `[
        NSUserDefaults only can use NSArray, NSDictionary, NSString, NSData, NSDate, NSNumber(intValue/floatValue/boolValue)
        NSUserDefaults returns immutable object event though mutable object is used
        For custom object, NSCoding protocol has to be implemented in order to use in NSUserDefaults
    `]

    [Xcode NSMutableArray]
    `[
        NSMutableArray* array = [[NSMutableArray alloc] initWithCapacity:2];                              // convert int to NSNumber and NSNumber to int
        [array addObject:[NSNumber numberWithInt:4]];
        [array addObject:[NSNumber numberWithInt:5]];

        int x = [[array objectAtIndex:0] integerValue];
        int y = [[array objectAtIndex:1] integerValue];
        --------------------------------------------------------------------------------
        [array removeObjectAtIndex:index];
        --------------------------------------------------------------------------------
        [array removeAllObjects];
        --------------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc] initWithCapacity:2];                              // convert int to NSNumber and NSNumber to int
        [array addObject:@"dog"]; 
        [array addObject:@"cat"]; 
        String str0 = [array objectAtIndex:0]; 
        String str1 = [array objectAtIndex:1]; 
        ================================================================================
        [self.searchBar becomeFirstResponder];
        [self.searchBar resignFirstResponder];
        NSMutableArray* mutableArray = [NSMutableArray arrayWithArray:oldMutableArray];                  // copy mutable array
        NSUInteger* myNSUInteger   = [myNSNumber integerValue];                                          // Convert NSNumber to NSUInteger
        --------------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc] initWithCapacity:10];
        NSMutableArray* arr1 = [[NSMutableArray alloc] initWithCapacity:2];
        NSMutableArray* arr2 = [[NSMutableArray alloc] initWithCapacity:2];

        [arr1 addObject:@"dog"];
        [arr1 addObject:@"cat"];

        [arr2 addObject:@"cat"];
        [arr2 addObject:@"dog"];

        [array addObject:arr1];
        [array addObject:arr2];
        [array containsObject:arr1]
        --------------------------------------------------------------------------------
        [arr3 addObject:[MyLib NumInt:1]];
        [arr3 addObject:[MyLib NumInt:2]];

        [arr4 addObject:[MyLib NumInt:2]];
        [arr4 addObject:[MyLib NumInt:1]];
        [array2 addObject:arr3];
        [array2 addObject:arr4];

        [array2 removeObject:arr3];
        [array2 removeObject:arr4];
        --------------------------------------------------------------------------------
        NSMutableArray* arrayNum = [[NSMutableArray alloc]initWithObjects:[MyLib NumInt:1], [MyLib NumInt:2], nil];
        NSMutableArray* arrayStr = [[NSMutableArray alloc]initWithObjects:@"1", @"2", nil];
        --------------------------------------------------------------------------------
        NSArray* nsarray        = [[NSArray alloc] initWithObjects:@"str1", @"str2", nil];
        NSMutableArray* muarray = [[NSMutableArray alloc]initWithArray:nsarray];
        NSArray* nsarray1       = [[NSArray alloc]initWithArray:nsarray];
        --------------------------------------------------------------------------------
        NSMutableArray* array = [[NSMutableArray alloc]initWithCapacity:2]; // searchkey: NSMutableArray to NSArray 
        [array addObject:@"dog"];
        [array addObject:@"cat"];

        // NSMutableArray to array
        NSArray* nsarray = [array mutableCopy];
        for(NSString* str in nsarray){
            NSLog(@"str=[%@]", str);
        }
        --------------------------------------------------------------------------------
        NSUserDefaults* defaultUser = [NSUserDefaults standardUserDefaults];
        NSMutableArray* array = [NSMutableArray arrayWithCapacity:2];
        [array insertObject:@(4) atIndex:0]
        [array addObject:@(1)];
        [array addObject:@(2)];
        [array addObject:@(3)];

        [defaultUser setObject:array forKey:@"key"];
        NSMutableArray* myarray = [defaultUser objectForKey:@"key"];

        for(NSMutableArray* arr in myarray){
            NSLog(@"arr=[%@]", arr);
        }
        --------------------------------------------------------------------------------
        --------------------------------------------------------------------------------
    `]

    [Xcode tips, xcode build, xcodebuild, xbuild, buildxcode, build xcode]
    `[
          xcodebuild test -scheme SimpleApp -destination 'platform=iOS Simulator,name=iPhone Retina (4-inch 64-bit),OS=7.1'  // Xcode build from command line
          /Users/cat/Library/Developer/Xcode/DerivedData  // Xcode delete cache
          xcodebuild -scheme MyLib -destination 'platform=iphonesimulator,name=iPhone 6' -derivedDataPath build    // Xcode build from command line
          AppDelegate* appDelegate = (AppDelegate*)[[UIApplication sharedApplication] delegate];
    `]

    [Xcode build from commcand line test cases build test cases]
    `[
          xcodebuild test -project CoreApp.xcodeproj -scheme CoreAppTests -destination 'platform=iOS Simulator,name=iPhone 6,OS=9.3'
    `]
    {{ src=image/addtestscheme.png w=70% h=70% }}

    [Xcode NSValue valueWithCGPoint]
    `[
            #NSValue
            // print point, print cgpoint
            NSLog(@"point     = [%@]", [NSValue valueWithCGPoint:point]);
            NSLog(@"Size      = [%@]", [NSValue valueWithCGSize:size]);
            NSLog(@"rect      = [%@]", [NSValue valueWithCGRect:rect]);
            NSLog(@"transform = [%@]", [NSValue valueWithCATransform3D:transform]);
            
            // CGPoint to NSValue and NSValue to CGPoint
            NSValue* value = [NSValue valueWithCGPoint:anchorPoint]
            CGPoint mypoint = [value CGPointValue];
    `]

    [Xcode animation ]
    `[
        // Load images
        NSArray *imageNames = @[@"win_1.png", @"win_2.png"];
        NSMutableArray *images = [[NSMutableArray alloc] init];
        for (int i = 0; i < imageNames.count; i++) {
            [images addObject:[UIImage imageNamed:[imageNames objectAtIndex:i]]];
        }

        // Normal #Animation
        UIImageView *animationImageView = [[UIImageView alloc] initWithFrame:CGRectMake(60, 95, 86, 193)];
        animationImageView.animationImages = images;
        animationImageView.animationDuration = 0.5;

        [self.view addSubview:animationImageView];
        [animationImageView startAnimating];
        
        // Slow motion animation
        UIImageView *slowAnimationImageView = [[UIImageView alloc] initWithFrame:CGRectMake(160, 95, 86, 193)];
        slowAnimationImageView.animationImages = images;
        slowAnimationImageView.animationDuration = 5;
        
        [self.view addSubview:slowAnimationImageView];
        [slowAnimationImageView startAnimating];
    `]

     [Xcode print format NSValue, print CGPoint, CATransform3D]
    `[
        NSString* str = [NSString stringWithFormat:@"%2ld:0%ld", minute, second];
        -(void)printCATransform3D:(CATransform3D)transform{
            NSLog(@"-------------------------------------------------------------------------------");
            NSLog(@"[%f] [%f] [%f] [%f]", transform.m11, transform.m12, transform.m13, transform.m14);
            NSLog(@"[%f] [%f] [%f] [%f]", transform.m21, transform.m22, transform.m23, transform.m24);
            NSLog(@"[%f] [%f] [%f] [%f]", transform.m31, transform.m32, transform.m33, transform.m34);
            NSLog(@"[%f] [%f] [%f] [%f]", transform.m41, transform.m42, transform.m43, transform.m44);
            NSLog(@"-------------------------------------------------------------------------------");
        }

        CGPoint anchorPoint = self.window.layer.anchorPoint;
        CGPoint position = self.window.layer.position;
        NSLog(@"anchor_x=[%f] anchor_y=[%f]  position_x=[%f], position_y=[%f]", anchorPoint.x, anchorPoint.y, position.x, position.y);
        NSLog(@"point   =[%@]", [NSValue valueWithCGPoint:anchorPoint]);
        NSLog(@"position=[%@]", [NSValue valueWithCGPoint:position]);
        
        CGRect rect = CGRectMake(10, 20, 40, 40);
        NSLog(@"Rect=[%@]", [NSValue valueWithCGRect:rect]);
        CGSize size = CGSizeMake(10.1, 20.2); NSLog(@"Size=[%@]", [NSValue valueWithCGSize:size]);

        -(void)printLayerInfo:(CALayer*)layer text:(NSString*)text{  
            CGPoint anchorPoint = layer.anchorPoint;                
            CGPoint position = layer.position;                     
            CGRect frame = layer.frame;                            
            CGRect bounds = layer.bounds;                           
            NSLog(@"--------------------[begin %@]------------------------------", text);    
            NSLog(@"anchor  [%@]", [NSValue valueWithCGPoint:anchorPoint]);                  
            NSLog(@"position[%@]", [NSValue valueWithCGPoint:position]);                    
            NSLog(@"frame   [%@]", [NSValue valueWithCGRect:frame]);                        
            NSLog(@"bounds  [%@]", [NSValue valueWithCGRect:bounds]);                      
            NSLog(@"--------------------[end   %@]------------------------------", text);   
        }             
    `]
    
    [Xcode Format String]
    `[
            format string formatting
            NSString* str = [NSString stringWithFormat:@"%2ld:0%ld", minute, second];
            --------------------------------------------------------------------------------
            // one decimal for float
            NSString* strFormat = [NSString stringWithFormat:@"[%.01f][%.01f]", xcolor.blue, xcolor.alpha];
            --------------------------------------------------------------------------------
            %@ Objective-C object, printed string returned by descriptionWithLocale
            %% '%' character.
            %d, %D Signed 32-bit integer (int).
            %u, %U Unsigned 32-bit integer (unsigned int).
            %x Unsigned 32-bit integer (unsigned int), printed in hex using 0–9 and a–f.
            %X Unsigned 32-bit integer (unsigned int), printed in hex using 0–9 and A–F.
            %o, %O Unsigned 32-bit integer (unsigned int), printed in octal.
            %f 64-bit float (double).
            %e 64-bit float (double), e exponent.
            %E 64-bit float (double), E exponent.
            %g 64-bit float (double), %e if exponent < – 4 or >= to the precision, %f o.w.
            %G 64-bit float (double), %E if exponent < – 4 or >= to the precision, %f o.w.
            %c 8-bit unsigned character
            %C 16-bit Unicode character
            %s Null-terminated array of 8-bit unsigned characters.
            %S Null-terminated array of 16-bit Unicode characters.
            %p Void pointer (void *), printed in hex with the digits 0–9 and a–f, with a leading 0x.
            %a 64-bit float, leading 0x and one hex before decimal pt using p as exp.
            %A 64-bit float, leading 0X and one hex before decimal pt using P as exp.
            %F 64-bit float, printed in decimal notation.
            %d bool stype
            %.21Lg 20 precision
    `]

    [Swift]
    `[
        // concatenate string
        let str1 = "hello"
        let str2 = "world"
        let str3 = str1 + "," + str2
        let str4 = "\(str1),\(str2)"

        // create array 
        var array = [Int]()
        print("size=\( array.count )")
        array.append(3)
        array.append(4)
        print("size=\( array.count )")
        array = [] 
        print("size=\( array.count )")

        // Iterating over an array
        var myarray = [Double](count:3, repeatedValue:1)
        for item in myarray{
            print("item=\(item)")
        }

        var f = myarray[0];
        print("f=\(f)")

        // class
        class Counter {
            var count = 0
            func incrementBy(amount: Int) {
                count += amount
            }
        }
        let counter = Counter()
        counter.incrementBy(5)
    `]


    [Remove CAShaperLayer from parent Layer CALayer]
    `[
        // xcode draw circle
        CAShapeLayer* circleLayer = [CAShapeLayer layer];
        circleLayer.name = @"circle";
        CGFloat leftX = 100.0f;
        CGFloat leftY = 100.0f;
        CGFloat Width = 50.0f;
        CGFloat Height = 50.0f;
        UIBezierPath* path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(leftX, leftY, Width, Height)];
        [circleLayer setPath:[path CGPath]];
        
        CGFloat component[4];
        component[0] = 100.0;
        component[1] = 1.0;
        component[2] = 2.0;
        component[3] = 2.0;
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        [circleLayer setStrokeColor:CGColorCreate(colorSpace, component)];
        [circleLayer setLineWidth:1.0f];
        [circleLayer setFillColor:[[UIColor brownColor] CGColor]];

        // xcode remove layer, xcode delete layer, delete layer, remove layer
        for(CAShapeLayer* layer in [self.window.layer.sublayers copy]){
            if([[layer name] isEqualToString:@"circle"]){
                [layer removeFromSuperlayer];
            }
        }
    `]

    [python snippet]
    `[
        mode	description
        r	read in text mode
        w	write in text mode, overwrite old file if exists
        a	append in text mode
        r+	read and write
        w+	read and write, overwrite old file/create file
        a+	read and append
        rb	read in binary mode
        wb	write in binary mode, overwrite old file if exists
        ab	append in binary mode
        rb+	read and write in binary mode
        wb+	write and read in binary mode, overwrite old file if exists
        ab+	append and read in binary mode

        python -m pdb script.py              // debug python
        str = str.strip(' \r\n\t')           // trim whitespace
        str = str.ltrip(' \r\n\t')           // trim the left side of str
        str = str.rtrip(' \r\n\t')           // trim the right side of str
        is_number(mystring)                  // convert string to number/integer
        arglist = sys.argv;                  // argument list
        arglist[0]                           // first argument which is the script name
        len(mystring)                        // length of string
        len(list)                            // number of element inside the list
        mylist = []                          // create list
        handler = open(fileName, "r+")       // open file for read
        int(str)                             // convert string to integer
        list.pop(0)                          // Delete first element from list
        list.append("str")                   // Append str to list
        basename = ntpath.basename(path)     // Basename of path
        os.path.basename("/dog/dog/dog.txt") // import os;
        pair = os.path.splitext("file.txt")  // pair[0] = file  pair[1]=".txt"
        os.path.join("/home", "cat")         // /home/cat
        os.path.join("/home/", "cat")        // /home/cat
        str(num)                             // String to integer
        os.getcwd()
        arr1 = arr[:];                       // clone list duplicate list
        "cool\n".rstrip()                    // remove newline delete newline
        -----------------------------------
        // python empty open file, python empty file
        pathfile    = "/Users/cat/myfile/github/python/pather/path.txt"
        pathWriter  = open(pathfile, "r+")
        pathWriter.seek(0)
        pathWriter.truncate()
        -----------------------------------
        line = "some stuff"
        regex = re.compile(r'(file\W*=\W*)(\S+)\W*(title\W*=\W*)"(.*)"')
            match = regex.search(line)
            if match:
                print "(0)=", match.group(0)
                print "(1)=", match.group(1)
                print "(2)=", match.group(2)
                print "(3)=", match.group(3)
                print "(4)=", match.group(4)
        -----------------------------------
        subprocess.call(["pygmentize", "-f", "html", "-o", htmlFile, tmpFileName])
        -----------------------------------
        list = []
        list[0] = 'cat'
        list[1] = 'cat'
        list.append('dog')
        list.pop()
        list.pop(1)
        -----------------------------------
        dict = {}
        dict = {'k1':'value1', 'k2':'value2'}
        dict['k1']
        -----------------------------------
        string.strip()                      // trim leading and trailing whitespace
    `]

    [Vim tip, vim trick]
    `[
        :record q and letter a, replay @a // vim recording 
        :1/pat                          // search from the first line, cool tip
        :1?pat                          // search backward, from last line, cool tip
        :zz                             // move the cursor to middle of screen
        :zt                             // move the cursor to Top of screen
        :zb                             // move the cursor to Botton screen

        :echo v:this_session            // show current vim session file
        // All in insert mode
        CTRL-D		command-line completion
        CTRL-N		command-line completion
        CTRL-P		command-line completion
        CTRL-A		command-line completion
        CTRL-L		command-line completion
        CTRL-W      delete world before the cursor // insert mode
        CTRL-U      delete remove all characters between the cursor and the beginning of the line

        s/\%V\_^/\/\//gc  [:h \_^]   // \_^ can be used anywhere in the pattern comment all selected lines, selection match visual mode
        %s/\[\(\w\+\)\s\+objectAtIndex:\([^]]\+\)\]/\1\[\2\]/gc // replace [array objectAtIndex:index] with array[index] in ObjectiveC

        //Copy text from vim to clipboard [:h clipboard]
        "* is special Register that stores selection
        "*y Copy text from vim to clipboard
        "*p Paste text from clipboard to vim 

        :3dd // delete below 3 line from the current line
        
        :let x = 0 | g/$/s//\='[' . x . ']'/ | let x = x + 1  // append [x] to the end of line

        :CTRL-O     //Jump Older cursor position in jump list [:h jumps]
        :CTRL-I     //Jump newer cursor position in jump list backward

        :vimgrep /MyString/ /home/mycode/**/*.m   // Search MyString pattern recursively[**/*.m] two arsterisks 
        :copen      // Open your quickfix 
        :gf         // open the file under the currsor

        :find will search the directories/files in path option [:h :find]
        :vim $(find ./ -name \*.java -print)                // open all java file from find
        :set path? //will show current path option [:h path]
        :set path +=/home/mycode //You can add different directories to path option in Vim
        
        " reset to default
        :set path& [:h set]

        :set complete=k/home/myfile/*,k~/home/dir
        " auto completion search your own file
        " [:h complete]
        " k{dict} scan the file {dict}. Servan flags can be given

        In Vim Script, there are many options to handle file names, paths   
        :h cmdline

        :bufdo e!                                                                                       // Save reload all buffers :syntax on  to enable syntax highlight
        :bufdo %s/pattern/replacement/ge | update                                                       // vim replace all buffers
        :zf                // Create fold under cursor
        :zd                // Delete fold under cursor
        :5gt               // goto tab 5, [in insert mode]
        :tabmove 4         // move the current tab to position 4 [help :tabmove]
        :tabc 11           // close tab 11

        :set modeline      // display file name in each tabs page
        :set ls=2

        :set modeline      // display full file name in statusline [:help :statusline]
        :set statusline=%F

        
        :help debug-mode                             // debug vim script                                                                                                          
        
        :echo getline(".")                           // get current line string                                                                                                   
        :echo match("mystring", "st")                // return 2                                                                                                                  
        :Align \*\zs\s\+ =                           // *'  ' and '=' separator                                                                                                   
        :\%V                                         // visual selection block [:help \%V]                                                                                        
        :'<,>'sort /\ze\%V/                          // sort all selected lines in visual mode                                                                                    
        :'< and >'                                   // first cursor position/last cursor position in registers in visual mode/selection                                          

        :g/^$/d                                      // delete empty line                                                                                                         
        :let @a=substitue(@a, 'pattern', 'sub', 'g') // substitute 'pattern' with 'sub' in register @a                                                                            
        :q: or q/                                    // vim command history                                                                                                       

        :hi Search guifg=Brown guibg=Gray
        :hi Search cterm=Brown ctermbg=Gray          // change search backgroun/foreground [:h hl-Search]                                                                         

        :sort n                                      // sort lines by the first digital in the line, [n] is first decimal number, [x] is first hexadecimal number [:help :sort]   
        :sort! n                                     // reverse sorting                                                                                                           

        :syn match MyKeyWord /MyName/                // Highlight defined keyword [:help syn-match]                                                                               
        :highlight MyKeyWord guifg=Green
        :'<,'>s/^\s*\zs\w/#\0/gc                     // comment all selected lines in python                                                                                      
        :set ma                                      // set file modifiable on  [:h modifiable]                                                                                   
        :ctrl-]                                      // class definition                                                                                                          
        :ctrl-t                                      // back to previous window                                                                                                   
        :s/pattern/\=@a.submatch(0).@b/gc            // substitute with two registers                                                                                             

        :redir @a                                    // redirect ex command to register                                                                                           
        :ls
        :redir END

        :redir @* | ls | redir END                   // redirect all the name of file to reg @* in buffer                                                                         
        
        :tabmove 4                                   // move the current tab to position 4 [help :tabmove]                                                                        
        :/pattern\c #ignorecase
        :hi clear SpellBad # Reset SpellBad bad spell highlight to default
        :g/-\s*(\w\+)\w+/z#.1                        // print all xcode methods with line number #                                                                                 

        :/\(if\)\ze\(then\)                          // if follows then "[if]then"                                                                                                 
        :/\(if\)\zs\(then\)                          // then starts with if "if[then]"   
        :g*         / search without word boundry

        :let i=1 | g/dog/s//\='cat' . i/gc | let i=i+1                   //  g/pattern/[cmd] [h :g] [h sub-replace-expression] searchkey: increase
        :let i=2 | .,$g/dog\d\+/s//\='cat' . i/gc | let i=i+1            //  vim increase number
        :for i in range(1,10) | if i % 2 == 0 | put = i | endif | endfor //  put even numbers from cursor position vertically
        :echo synIDattr(synIDtrans(hlID("Normal")), "bg") [:h hlID]      //  get background color
        :set hidden                                                      //  hidden an unsaved file, ow, file has to be saved with !
        :.,$s/some\(stuff\)/& . \1/gc                                    //  copy all i think % = \0 here
        :normal mode
        :%s/{\zs\(\_.}\@!\)*//gc                                         //  negative operator block of code { hello world }
        :\@!                                                             //  negative operator, subtract operator, exclusive operator
        :echo g:colors_name                                              //  get current color scheme
        :/usr/share/vim/vim73/colors                                     //  vim scheme, vim directory vim folder

        :autocmd BufEnter *.*  setlocal completefunc=CompleteAbbre       //  file type evil, autocmd will not detect file without extension. e.g. "file"

        // http://vim.1045645.n5.nabble.com/autocmd-pattern-exclusion-td5712330.html 
        :autocmd BufEnter *\(.txt)\@<!  TTT exec 'echo expand("%:p")' <CR>    //  excluding file type

        // start PERL mode, vim play mode
        gQ

        `]

    [Grep command]
    :vim $(grep -l --include="*.java" pattern .)
    :grep --color -Hnirs class\s\+\w\+\s\+\(extends\s\+[A-Za-z_\]\+\)*\s\+\(implements\s\+\([A-Za-z_\]\+\)\)\?\(\s\+\)*\(,\s\+[A-Za-z_\]\+\)* 
    :grep --include="*.java" "\"[a-zA-Z]\+\""  ./
    :vim $(grep -l --include="*.java" pattern .) #vim open all files from grep

    :his s                      // list commands history
    :his /                      // list search history

    :CTRL-E                     // scroll window up 
    :CTRL-Y                     // scroll window down
    :sleep 2
    :redraw

    *v_operator* *vim_operator* *v_ope*
    :d$  // delete to the end of line  delete line
    :diw // delete/yank/visual [i]nner word    block       delete word
    :daw // delete/yank/visual [a] word        block
    :dib // delete/yank/visual [i]nner '(' ')' block, delete block => insert mode
    :daB // ddelete/yank/visual[a] '(' ')' block
    :diB // ddelete/yank/visual[i]nner '{' '}' block
    :daB // ddelete/yank [a] '{' '}' block
    :ciw // delete word => insert mode

    *v_textobject* *vim_obj* *vim_text_object*
    :viw // select [i]nner word    block
    :vaw // select [a] word        block
    :vib // select [i]nner '(' ')' block
    :vaB // select [a] '(' ')' block
    :viB // select [i]nner '{' '}' block
    :vaB // select [a] '{' '}' block
    :V   // select line  linewise
    :vap // [:h textobjects] select block of lines, cursor move to next line very powerful
    :vip // [:h operator]select block of lines, cursor on the last line very powerful

    :syntax region MyColorGroup start=/\%2l/ end=/\%10l/
    :syntax clear MyColorGroup     // remove highlight

    :Compile Java code inside Vim [:h expand]

    {{ src=image/vim_operator.png w=50% h=50% }}

    [Vim script]
    `[
        :h *print*()                                // find all funciton, find all the function contais print 
        :printf("%4d: E%d %.30s", lnum, errno, msg) // vim formator                                           
        exec "normal \<C-W>h" [:h normal]           // move cursor to left window                             
        // display without Enter
        exec '!ls ' 

        " Fix the missing -cp option in java
        " Assume java file is in current buffer
        function! CompileJava()
            let path = expand("%")
            exec ":!javac " . path <CR> 
            let jclassName = expand("%:p:t:r")
            let className = expand("%:p:t:r")
            let cwd = getcwd()
            let full = ":!java -cp " . cwd . ":. " . jclassName
            exec  full 
        endfunction 

        :expand("%")    
        "file.txt

        :expand("%:p")  
        "/home/file.txt 

        :expand("%:p:t") 
        "file.txt

        :expand("%:p:r") 
        "/home/file

        :expand("%:p:t:r") 
        "file 

        :fnamemodify('/dog/f.txt', ':h') " /dog

        " get current file dir
        :getcwd()
        "/home

        " read file
        :readfile(fname)

        " check whether a file with the name exists 
        :filereadable(fname)

        " write file
        :writefile(fname, "a") 
        :writefile(fname, "b") "b" binary mode

        [:h Dictionary]
        " dictionary
        let dict={'key': 'value'}

        " replace value 
        dict.key = 'dog'

        " Iterate through Dictionary
        for [key, value] in items(dict)
          echo key . ':' . value 
        endfor

        " remove key
        let value = remove(dict, 'key')
        echo value  " dog

        " get value
        echo dict['k1']

        [:h List]
        " list as value
        let list = ['a', 'b']
        add(dict.key, 'abc')
        echo dict.key   " ['a', 'b', 'abc']

        " list, string, length, len
        let list = []
        let list = ["cat", "dog"]
        let len = len(list)
        let fname = split(expand("%:p"), "/")
        let length = length("this is cool") 

        " remove list item
        :unlet list[3] " remove fourth item
        :unlet list[3:] " remove foruth to last

        " remove dictionary item
        :unlet dict['two'] 
        :unlet dict.two

        " This is especially useful to clean up global variables 
        :unlet global_var

        " sort a list
        let list = ['b', 'a']
        sort(list)

        " sort a list in-place, a list remain unmodified
        let copylist = sort(copy(list))

        " Iterate buffer list
        let bufcount = bufr("$")
        let curr = 1 
        while curr <= bufcount 
            let currbufname = bufname(curr)
            if buflisted(currbufname) && strlen(currbufname) > 0
                echo currbufname
            endif
            let curr = curr + 1
        endwhile

        " Iterate through List
        for item in mylist
          echo item
        endfor 

        " for loop
        let index = 0
        while index < len(mylist)
          echo mylist[index]
          let index = index + 1
        endwhile

        " list of open windows
        :echo range(1, winnr('$'))

        " To determine how many split-windows are open
        winnr('$')

        " How many in the current page
        tabpagewinnr(tabpagenr(), '$')
        
        http://vim.1045645.n5.nabble.com/how-to-get-list-of-open-windows-td1164662.html
        " List all split window by tab page 
        while t <= tabpagenr('$') 
                echo 'tab' t . ':' 
                let bufs = tabpagebuflist(t) 
                let w = 0 
                while w < tabpagewinnr(t, '$') 
                        echo "\t" . bufname(bufs[w]) 
                        let w += 1 
                endwhile 
                let t += 1 
        endwhile 
        unlet t w bufs 

        " split window on the right hand side
        :set splitright 

        " statusline format
        %-0{minwid}.{maxwid}{item}
        The - forces the item to be left aligned
        The 0 forces numeric value to be left padded with zeros

        " statusline evaludate function
        statusline+=%10{expand('%:p:h')}
        :statusline=%F\ %l:%c       " full path, line column number

        :echo getline(".")                           // get current line string                                                                                                 
        :echo match("mystring", "st")                // return 2                                                                                                                
        :echo line(".")                              // line number of cursor                                                                                                   
        :echo line("'t")                             // line number of mark t                                                                                                   
        :echo getpos(".")                            // [bufferNumber, col, lnum, off] [:help getpos]                                                                           
        :echo setpos(".", {list})                    // [bufferNumber, col, lnum, off]                                                                                          
        :echo [col, lnum] = searchpos("=")           // return = position in current line and move the cursor to =                                                              
        *v_substring* *substring*
        :echo strpart("cat", 0, 1)                   // 'a', vim substring, vim script substring
        :echo getline(".")                 // get current line string
        :echo match("mystring", "st")      // return 2
        :echo match("dog cat.", '\w\+\ze\.',  0)  // return 4
        :echo matchstr("dog cat.", '\w\+\ze\.', 0) // return cat
        :echo matchlist("dog cat.", '\w\+\ze\.', 0) // return list['cat', '']
        :echo line(".")                    // line number of cursor
        :echo line("'t")                   // line number of mark t
        :echo getpos(".")                  // [bufferNumber, col, lnum, off] [:help getpos]
        :echo setpos(".", {list})          // [bufferNumber, col, lnum, off]
        :echo [col, lnum] = searchpos("=") // return = position in current line and move the cursor to =
        :echo getline(".")                                                                              // get current line string
        :echo match("mystring", "st")                                                                   // return 2
        

        // let list = ['dog', 'cat', '*']
        // output: list['dog', 'cat']
        :call filter(list, 'v:val !~ "*")

        // join list = ['dog', 'cat'], output: dog/cat
        :call join(list, '/') 

        // example from help
        :call insert(list, 'a')		" prepend item 'a'
        :call insert(list, 'a', 3)	" insert item 'a' before list[3]
        :call add(list, "new")		" append String item
        :call add(list, [1, 2])		" append a List as one new item
        :call extend(list, [1, 2])	" extend the list with two more items
        :let i = remove(list, 3)	" remove item 3
        :unlet list[3]			" idem
        :let l = remove(list, 3, -1)	" remove items 3 to last item
        :unlet list[3 : ]		" idem
        :call filter(list, 'v:val !~ "x"')  " remove items with an 'x'
        :echo list[-1]              " get last item
        :echo list[1:3]             " get [1] to [3], partical list
        :echo list[1:]              " get [1] to last item, partical list

        // Changing the order of items in a list: >
        :call sort(list)		" sort a list alphabetically
        :call reverse(list)		" reverse the order of items
        :call uniq(sort(list))		" sort and remove duplicates

        :h complete-functions              // get complete function completefunc
        :h completefunc
        :help debug-mode                   // debug vim script
    `]

    [Git command git branch show on command prompt]
    `[
        :git branch myfeature_branchcreate                   // create new feature branch
        :git branch -d delete_branchdelete                   // [git delete] feature branch
        :git branch -D delete_branchdelete                   // unmerged feature branch
        :git checkout master 
        :git merge --no-ff feature_branch // [git merge]merge feature branch to master
        :git rm -r --cached myfile                           // remove file from your index
        :git refloghow                                       // all the reference log
        :git reset --hard 828c8c0b1995                       // revert to previous commit
        :git diff --stat hash1  hash2                        // diff two commits from two hashes 
        :git log -- specific_file                            // get log on specific file
        :git commit --amend -m "new message"                 // change the most recent message, amend your most recent message.
        :git stash                                           // save your modified tracked files to a stack and that you can reapply late. 
        :git stash list                                      // list all the stashes

        :git rm -r myfile                                    // remove file from local repository and file system.

        :git rm --cached rm_repos_file                       // remove file only from local repository but from file system. 
        :git commit -m "msg" 

        :.git/info/exclude                                   // for local file that does't need to be shared, just add file or dir pattern
        parse_git_branch(){
            git branch 2> /dev/null | sed -e 's/* \(.*\)/ \(\1)/'
        }
        export PS1="\u$(parse_git_branch)\w$"
        \u - Username
        \w - Full path
        \h - Host name
    `]

    
    [iOS Game Development]
    {{ src=image/gameOption.png w=50% h=50% }}
    {{ src=image/gridgrid.png w=50% h=50% }}
    {{ src=image/gridgridstack.png w=50% h=50% }}
    {{ src=image/calayer.png w=50% h=50% }}

    [SpriteKit Development SKView SKScene SCNNode]
    {{ src=image/spritekit.png w=50% h=50% }}
    [SpriteKit how to create weapon with SKSPriteNode create physicsBody]
    {{ src=image/sprite2.png w=70% h=70% }}
    {{ src=image/toparr.png w=70% h=70% }}

    [bookmark]
    `[
        java pattern, jpattern, javapattern, http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
        vim open, vi url, vim url open  http://stackoverflow.com/questions/9458294/open-url-under-cursor-in-vim-with-browser
        1. haskell module directory http://stackoverflow.com/questions/5034685/what-is-the-haskell-syntax-to-import-modules-in-subdirectories
        2. monad, monoid, category /Users/cat/GoogleDrive/Books/Monads_in_Haskell.pdf
    `] 

